// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v13.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "BTGeneratedWebKitApis.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

/// Mirror of NSKeyValueObservingOptions.
///
/// See
/// https://developer.apple.com/documentation/foundation/nskeyvalueobservingoptions?language=objc.
@implementation BTNSKeyValueObservingOptionsEnumBox
- (instancetype)initWithValue:(BTNSKeyValueObservingOptionsEnum)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

/// Mirror of NSKeyValueChange.
///
/// See https://developer.apple.com/documentation/foundation/nskeyvaluechange?language=objc.
@implementation BTNSKeyValueChangeEnumBox
- (instancetype)initWithValue:(BTNSKeyValueChangeEnum)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

/// Mirror of NSKeyValueChangeKey.
///
/// See https://developer.apple.com/documentation/foundation/nskeyvaluechangekey?language=objc.
@implementation BTNSKeyValueChangeKeyEnumBox
- (instancetype)initWithValue:(BTNSKeyValueChangeKeyEnum)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

/// Mirror of WKUserScriptInjectionTime.
///
/// See https://developer.apple.com/documentation/webkit/wkuserscriptinjectiontime?language=objc.
@implementation BTWKUserScriptInjectionTimeEnumBox
- (instancetype)initWithValue:(BTWKUserScriptInjectionTimeEnum)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

/// Mirror of WKAudiovisualMediaTypes.
///
/// See
/// [WKAudiovisualMediaTypes](https://developer.apple.com/documentation/webkit/wkaudiovisualmediatypes?language=objc).
@implementation BTWKAudiovisualMediaTypeEnumBox
- (instancetype)initWithValue:(BTWKAudiovisualMediaTypeEnum)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

/// Mirror of WKWebsiteDataTypes.
///
/// See
/// https://developer.apple.com/documentation/webkit/wkwebsitedatarecord/data_store_record_types?language=objc.
@implementation BTWKWebsiteDataTypeEnumBox
- (instancetype)initWithValue:(BTWKWebsiteDataTypeEnum)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

/// Mirror of WKNavigationActionPolicy.
///
/// See https://developer.apple.com/documentation/webkit/wknavigationactionpolicy?language=objc.
@implementation BTWKNavigationActionPolicyEnumBox
- (instancetype)initWithValue:(BTWKNavigationActionPolicyEnum)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

/// Mirror of WKNavigationResponsePolicy.
///
/// See https://developer.apple.com/documentation/webkit/wknavigationactionpolicy?language=objc.
@implementation BTWKNavigationResponsePolicyEnumBox
- (instancetype)initWithValue:(BTWKNavigationResponsePolicyEnum)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

/// Mirror of NSHTTPCookiePropertyKey.
///
/// See https://developer.apple.com/documentation/foundation/nshttpcookiepropertykey.
@implementation BTNSHttpCookiePropertyKeyEnumBox
- (instancetype)initWithValue:(BTNSHttpCookiePropertyKeyEnum)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

/// An object that contains information about an action that causes navigation
/// to occur.
///
/// Wraps
/// [WKNavigationType](https://developer.apple.com/documentation/webkit/wknavigationaction?language=objc).
@implementation BTWKNavigationTypeBox
- (instancetype)initWithValue:(BTWKNavigationType)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

/// Possible permission decisions for device resource access.
///
/// See https://developer.apple.com/documentation/webkit/wkpermissiondecision?language=objc.
@implementation BTWKPermissionDecisionBox
- (instancetype)initWithValue:(BTWKPermissionDecision)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

/// List of the types of media devices that can capture audio, video, or both.
///
/// See https://developer.apple.com/documentation/webkit/wkmediacapturetype?language=objc.
@implementation BTWKMediaCaptureTypeBox
- (instancetype)initWithValue:(BTWKMediaCaptureType)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

/// Responses to an authentication challenge.
///
/// See
/// https://developer.apple.com/documentation/foundation/nsurlsessionauthchallengedisposition?language=objc.
@implementation BTNSUrlSessionAuthChallengeDispositionBox
- (instancetype)initWithValue:(BTNSUrlSessionAuthChallengeDisposition)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

/// Specifies how long a credential will be kept.
@implementation BTNSUrlCredentialPersistenceBox
- (instancetype)initWithValue:(BTNSUrlCredentialPersistence)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
            error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface BTNSKeyValueObservingOptionsEnumData ()
+ (BTNSKeyValueObservingOptionsEnumData *)fromList:(NSArray *)list;
+ (nullable BTNSKeyValueObservingOptionsEnumData *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface BTNSKeyValueChangeKeyEnumData ()
+ (BTNSKeyValueChangeKeyEnumData *)fromList:(NSArray *)list;
+ (nullable BTNSKeyValueChangeKeyEnumData *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface BTWKUserScriptInjectionTimeEnumData ()
+ (BTWKUserScriptInjectionTimeEnumData *)fromList:(NSArray *)list;
+ (nullable BTWKUserScriptInjectionTimeEnumData *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface BTWKAudiovisualMediaTypeEnumData ()
+ (BTWKAudiovisualMediaTypeEnumData *)fromList:(NSArray *)list;
+ (nullable BTWKAudiovisualMediaTypeEnumData *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface BTWKWebsiteDataTypeEnumData ()
+ (BTWKWebsiteDataTypeEnumData *)fromList:(NSArray *)list;
+ (nullable BTWKWebsiteDataTypeEnumData *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface BTWKNavigationActionPolicyEnumData ()
+ (BTWKNavigationActionPolicyEnumData *)fromList:(NSArray *)list;
+ (nullable BTWKNavigationActionPolicyEnumData *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface BTNSHttpCookiePropertyKeyEnumData ()
+ (BTNSHttpCookiePropertyKeyEnumData *)fromList:(NSArray *)list;
+ (nullable BTNSHttpCookiePropertyKeyEnumData *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface BTWKPermissionDecisionData ()
+ (BTWKPermissionDecisionData *)fromList:(NSArray *)list;
+ (nullable BTWKPermissionDecisionData *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface BTWKMediaCaptureTypeData ()
+ (BTWKMediaCaptureTypeData *)fromList:(NSArray *)list;
+ (nullable BTWKMediaCaptureTypeData *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface BTNSUrlRequestData ()
+ (BTNSUrlRequestData *)fromList:(NSArray *)list;
+ (nullable BTNSUrlRequestData *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface BTNSHttpUrlResponseData ()
+ (BTNSHttpUrlResponseData *)fromList:(NSArray *)list;
+ (nullable BTNSHttpUrlResponseData *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface BTWKUserScriptData ()
+ (BTWKUserScriptData *)fromList:(NSArray *)list;
+ (nullable BTWKUserScriptData *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface BTWKNavigationActionData ()
+ (BTWKNavigationActionData *)fromList:(NSArray *)list;
+ (nullable BTWKNavigationActionData *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface BTWKNavigationResponseData ()
+ (BTWKNavigationResponseData *)fromList:(NSArray *)list;
+ (nullable BTWKNavigationResponseData *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface BTWKFrameInfoData ()
+ (BTWKFrameInfoData *)fromList:(NSArray *)list;
+ (nullable BTWKFrameInfoData *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface BTNSErrorData ()
+ (BTNSErrorData *)fromList:(NSArray *)list;
+ (nullable BTNSErrorData *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface BTWKScriptMessageData ()
+ (BTWKScriptMessageData *)fromList:(NSArray *)list;
+ (nullable BTWKScriptMessageData *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface BTWKSecurityOriginData ()
+ (BTWKSecurityOriginData *)fromList:(NSArray *)list;
+ (nullable BTWKSecurityOriginData *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface BTNSHttpCookieData ()
+ (BTNSHttpCookieData *)fromList:(NSArray *)list;
+ (nullable BTNSHttpCookieData *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface BTObjectOrIdentifier ()
+ (BTObjectOrIdentifier *)fromList:(NSArray *)list;
+ (nullable BTObjectOrIdentifier *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface BTAuthenticationChallengeResponse ()
+ (BTAuthenticationChallengeResponse *)fromList:(NSArray *)list;
+ (nullable BTAuthenticationChallengeResponse *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation BTNSKeyValueObservingOptionsEnumData
+ (instancetype)makeWithValue:(BTNSKeyValueObservingOptionsEnum)value {
  BTNSKeyValueObservingOptionsEnumData *pigeonResult =
          [[BTNSKeyValueObservingOptionsEnumData alloc] init];
  pigeonResult.value = value;
  return pigeonResult;
}
+ (BTNSKeyValueObservingOptionsEnumData *)fromList:(NSArray *)list {
  BTNSKeyValueObservingOptionsEnumData *pigeonResult =
          [[BTNSKeyValueObservingOptionsEnumData alloc] init];
  pigeonResult.value = [GetNullableObjectAtIndex(list, 0) integerValue];
  return pigeonResult;
}
+ (nullable BTNSKeyValueObservingOptionsEnumData *)nullableFromList:(NSArray *)list {
  return (list) ? [BTNSKeyValueObservingOptionsEnumData fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
          @(self.value),
  ];
}
@end

@implementation BTNSKeyValueChangeKeyEnumData
+ (instancetype)makeWithValue:(BTNSKeyValueChangeKeyEnum)value {
  BTNSKeyValueChangeKeyEnumData *pigeonResult = [[BTNSKeyValueChangeKeyEnumData alloc] init];
  pigeonResult.value = value;
  return pigeonResult;
}
+ (BTNSKeyValueChangeKeyEnumData *)fromList:(NSArray *)list {
  BTNSKeyValueChangeKeyEnumData *pigeonResult = [[BTNSKeyValueChangeKeyEnumData alloc] init];
  pigeonResult.value = [GetNullableObjectAtIndex(list, 0) integerValue];
  return pigeonResult;
}
+ (nullable BTNSKeyValueChangeKeyEnumData *)nullableFromList:(NSArray *)list {
  return (list) ? [BTNSKeyValueChangeKeyEnumData fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
          @(self.value),
  ];
}
@end

@implementation BTWKUserScriptInjectionTimeEnumData
+ (instancetype)makeWithValue:(BTWKUserScriptInjectionTimeEnum)value {
  BTWKUserScriptInjectionTimeEnumData *pigeonResult =
          [[BTWKUserScriptInjectionTimeEnumData alloc] init];
  pigeonResult.value = value;
  return pigeonResult;
}
+ (BTWKUserScriptInjectionTimeEnumData *)fromList:(NSArray *)list {
  BTWKUserScriptInjectionTimeEnumData *pigeonResult =
          [[BTWKUserScriptInjectionTimeEnumData alloc] init];
  pigeonResult.value = [GetNullableObjectAtIndex(list, 0) integerValue];
  return pigeonResult;
}
+ (nullable BTWKUserScriptInjectionTimeEnumData *)nullableFromList:(NSArray *)list {
  return (list) ? [BTWKUserScriptInjectionTimeEnumData fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
          @(self.value),
  ];
}
@end

@implementation BTWKAudiovisualMediaTypeEnumData
+ (instancetype)makeWithValue:(BTWKAudiovisualMediaTypeEnum)value {
  BTWKAudiovisualMediaTypeEnumData *pigeonResult =
          [[BTWKAudiovisualMediaTypeEnumData alloc] init];
  pigeonResult.value = value;
  return pigeonResult;
}
+ (BTWKAudiovisualMediaTypeEnumData *)fromList:(NSArray *)list {
  BTWKAudiovisualMediaTypeEnumData *pigeonResult =
          [[BTWKAudiovisualMediaTypeEnumData alloc] init];
  pigeonResult.value = [GetNullableObjectAtIndex(list, 0) integerValue];
  return pigeonResult;
}
+ (nullable BTWKAudiovisualMediaTypeEnumData *)nullableFromList:(NSArray *)list {
  return (list) ? [BTWKAudiovisualMediaTypeEnumData fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
          @(self.value),
  ];
}
@end

@implementation BTWKWebsiteDataTypeEnumData
+ (instancetype)makeWithValue:(BTWKWebsiteDataTypeEnum)value {
  BTWKWebsiteDataTypeEnumData *pigeonResult = [[BTWKWebsiteDataTypeEnumData alloc] init];
  pigeonResult.value = value;
  return pigeonResult;
}
+ (BTWKWebsiteDataTypeEnumData *)fromList:(NSArray *)list {
  BTWKWebsiteDataTypeEnumData *pigeonResult = [[BTWKWebsiteDataTypeEnumData alloc] init];
  pigeonResult.value = [GetNullableObjectAtIndex(list, 0) integerValue];
  return pigeonResult;
}
+ (nullable BTWKWebsiteDataTypeEnumData *)nullableFromList:(NSArray *)list {
  return (list) ? [BTWKWebsiteDataTypeEnumData fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
          @(self.value),
  ];
}
@end

@implementation BTWKNavigationActionPolicyEnumData
+ (instancetype)makeWithValue:(BTWKNavigationActionPolicyEnum)value {
  BTWKNavigationActionPolicyEnumData *pigeonResult =
          [[BTWKNavigationActionPolicyEnumData alloc] init];
  pigeonResult.value = value;
  return pigeonResult;
}
+ (BTWKNavigationActionPolicyEnumData *)fromList:(NSArray *)list {
  BTWKNavigationActionPolicyEnumData *pigeonResult =
          [[BTWKNavigationActionPolicyEnumData alloc] init];
  pigeonResult.value = [GetNullableObjectAtIndex(list, 0) integerValue];
  return pigeonResult;
}
+ (nullable BTWKNavigationActionPolicyEnumData *)nullableFromList:(NSArray *)list {
  return (list) ? [BTWKNavigationActionPolicyEnumData fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
          @(self.value),
  ];
}
@end

@implementation BTNSHttpCookiePropertyKeyEnumData
+ (instancetype)makeWithValue:(BTNSHttpCookiePropertyKeyEnum)value {
  BTNSHttpCookiePropertyKeyEnumData *pigeonResult =
          [[BTNSHttpCookiePropertyKeyEnumData alloc] init];
  pigeonResult.value = value;
  return pigeonResult;
}
+ (BTNSHttpCookiePropertyKeyEnumData *)fromList:(NSArray *)list {
  BTNSHttpCookiePropertyKeyEnumData *pigeonResult =
          [[BTNSHttpCookiePropertyKeyEnumData alloc] init];
  pigeonResult.value = [GetNullableObjectAtIndex(list, 0) integerValue];
  return pigeonResult;
}
+ (nullable BTNSHttpCookiePropertyKeyEnumData *)nullableFromList:(NSArray *)list {
  return (list) ? [BTNSHttpCookiePropertyKeyEnumData fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
          @(self.value),
  ];
}
@end

@implementation BTWKPermissionDecisionData
+ (instancetype)makeWithValue:(BTWKPermissionDecision)value {
  BTWKPermissionDecisionData *pigeonResult = [[BTWKPermissionDecisionData alloc] init];
  pigeonResult.value = value;
  return pigeonResult;
}
+ (BTWKPermissionDecisionData *)fromList:(NSArray *)list {
  BTWKPermissionDecisionData *pigeonResult = [[BTWKPermissionDecisionData alloc] init];
  pigeonResult.value = [GetNullableObjectAtIndex(list, 0) integerValue];
  return pigeonResult;
}
+ (nullable BTWKPermissionDecisionData *)nullableFromList:(NSArray *)list {
  return (list) ? [BTWKPermissionDecisionData fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
          @(self.value),
  ];
}
@end

@implementation BTWKMediaCaptureTypeData
+ (instancetype)makeWithValue:(BTWKMediaCaptureType)value {
  BTWKMediaCaptureTypeData *pigeonResult = [[BTWKMediaCaptureTypeData alloc] init];
  pigeonResult.value = value;
  return pigeonResult;
}
+ (BTWKMediaCaptureTypeData *)fromList:(NSArray *)list {
  BTWKMediaCaptureTypeData *pigeonResult = [[BTWKMediaCaptureTypeData alloc] init];
  pigeonResult.value = [GetNullableObjectAtIndex(list, 0) integerValue];
  return pigeonResult;
}
+ (nullable BTWKMediaCaptureTypeData *)nullableFromList:(NSArray *)list {
  return (list) ? [BTWKMediaCaptureTypeData fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
          @(self.value),
  ];
}
@end

@implementation BTNSUrlRequestData
+ (instancetype)makeWithUrl:(NSString *)url
                 httpMethod:(nullable NSString *)httpMethod
        httpBody:(nullable FlutterStandardTypedData *)httpBody
        allHttpHeaderFields:(NSDictionary<NSString *, NSString *> *)allHttpHeaderFields {
  BTNSUrlRequestData *pigeonResult = [[BTNSUrlRequestData alloc] init];
  pigeonResult.url = url;
  pigeonResult.httpMethod = httpMethod;
  pigeonResult.httpBody = httpBody;
  pigeonResult.allHttpHeaderFields = allHttpHeaderFields;
  return pigeonResult;
}
+ (BTNSUrlRequestData *)fromList:(NSArray *)list {
  BTNSUrlRequestData *pigeonResult = [[BTNSUrlRequestData alloc] init];
  pigeonResult.url = GetNullableObjectAtIndex(list, 0);
  pigeonResult.httpMethod = GetNullableObjectAtIndex(list, 1);
  pigeonResult.httpBody = GetNullableObjectAtIndex(list, 2);
  pigeonResult.allHttpHeaderFields = GetNullableObjectAtIndex(list, 3);
  return pigeonResult;
}
+ (nullable BTNSUrlRequestData *)nullableFromList:(NSArray *)list {
  return (list) ? [BTNSUrlRequestData fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
          self.url ?: [NSNull null],
          self.httpMethod ?: [NSNull null],
          self.httpBody ?: [NSNull null],
          self.allHttpHeaderFields ?: [NSNull null],
  ];
}
@end

@implementation BTNSHttpUrlResponseData
+ (instancetype)makeWithStatusCode:(NSInteger)statusCode {
  BTNSHttpUrlResponseData *pigeonResult = [[BTNSHttpUrlResponseData alloc] init];
  pigeonResult.statusCode = statusCode;
  return pigeonResult;
}
+ (BTNSHttpUrlResponseData *)fromList:(NSArray *)list {
  BTNSHttpUrlResponseData *pigeonResult = [[BTNSHttpUrlResponseData alloc] init];
  pigeonResult.statusCode = [GetNullableObjectAtIndex(list, 0) integerValue];
  return pigeonResult;
}
+ (nullable BTNSHttpUrlResponseData *)nullableFromList:(NSArray *)list {
  return (list) ? [BTNSHttpUrlResponseData fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
          @(self.statusCode),
  ];
}
@end

@implementation BTWKUserScriptData
+ (instancetype)makeWithSource:(NSString *)source
                 injectionTime:(nullable BTWKUserScriptInjectionTimeEnumData *)injectionTime
        isMainFrameOnly:(BOOL)isMainFrameOnly {
  BTWKUserScriptData *pigeonResult = [[BTWKUserScriptData alloc] init];
  pigeonResult.source = source;
  pigeonResult.injectionTime = injectionTime;
  pigeonResult.isMainFrameOnly = isMainFrameOnly;
  return pigeonResult;
}
+ (BTWKUserScriptData *)fromList:(NSArray *)list {
  BTWKUserScriptData *pigeonResult = [[BTWKUserScriptData alloc] init];
  pigeonResult.source = GetNullableObjectAtIndex(list, 0);
  pigeonResult.injectionTime =
          [BTWKUserScriptInjectionTimeEnumData nullableFromList:(GetNullableObjectAtIndex(list, 1))];
  pigeonResult.isMainFrameOnly = [GetNullableObjectAtIndex(list, 2) boolValue];
  return pigeonResult;
}
+ (nullable BTWKUserScriptData *)nullableFromList:(NSArray *)list {
  return (list) ? [BTWKUserScriptData fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
          self.source ?: [NSNull null],
          (self.injectionTime ? [self.injectionTime toList] : [NSNull null]),
          @(self.isMainFrameOnly),
  ];
}
@end

@implementation BTWKNavigationActionData
+ (instancetype)makeWithRequest:(BTNSUrlRequestData *)request
                    targetFrame:(BTWKFrameInfoData *)targetFrame
                 navigationType:(BTWKNavigationType)navigationType {
  BTWKNavigationActionData *pigeonResult = [[BTWKNavigationActionData alloc] init];
  pigeonResult.request = request;
  pigeonResult.targetFrame = targetFrame;
  pigeonResult.navigationType = navigationType;
  return pigeonResult;
}
+ (BTWKNavigationActionData *)fromList:(NSArray *)list {
  BTWKNavigationActionData *pigeonResult = [[BTWKNavigationActionData alloc] init];
  pigeonResult.request = [BTNSUrlRequestData nullableFromList:(GetNullableObjectAtIndex(list, 0))];
  pigeonResult.targetFrame =
          [BTWKFrameInfoData nullableFromList:(GetNullableObjectAtIndex(list, 1))];
  pigeonResult.navigationType = [GetNullableObjectAtIndex(list, 2) integerValue];
  return pigeonResult;
}
+ (nullable BTWKNavigationActionData *)nullableFromList:(NSArray *)list {
  return (list) ? [BTWKNavigationActionData fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
          (self.request ? [self.request toList] : [NSNull null]),
          (self.targetFrame ? [self.targetFrame toList] : [NSNull null]),
          @(self.navigationType),
  ];
}
@end

@implementation BTWKNavigationResponseData
+ (instancetype)makeWithResponse:(BTNSHttpUrlResponseData *)response
                    forMainFrame:(BOOL)forMainFrame {
  BTWKNavigationResponseData *pigeonResult = [[BTWKNavigationResponseData alloc] init];
  pigeonResult.response = response;
  pigeonResult.forMainFrame = forMainFrame;
  return pigeonResult;
}
+ (BTWKNavigationResponseData *)fromList:(NSArray *)list {
  BTWKNavigationResponseData *pigeonResult = [[BTWKNavigationResponseData alloc] init];
  pigeonResult.response =
          [BTNSHttpUrlResponseData nullableFromList:(GetNullableObjectAtIndex(list, 0))];
  pigeonResult.forMainFrame = [GetNullableObjectAtIndex(list, 1) boolValue];
  return pigeonResult;
}
+ (nullable BTWKNavigationResponseData *)nullableFromList:(NSArray *)list {
  return (list) ? [BTWKNavigationResponseData fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
          (self.response ? [self.response toList] : [NSNull null]),
          @(self.forMainFrame),
  ];
}
@end

@implementation BTWKFrameInfoData
+ (instancetype)makeWithIsMainFrame:(BOOL)isMainFrame request:(BTNSUrlRequestData *)request {
  BTWKFrameInfoData *pigeonResult = [[BTWKFrameInfoData alloc] init];
  pigeonResult.isMainFrame = isMainFrame;
  pigeonResult.request = request;
  return pigeonResult;
}
+ (BTWKFrameInfoData *)fromList:(NSArray *)list {
  BTWKFrameInfoData *pigeonResult = [[BTWKFrameInfoData alloc] init];
  pigeonResult.isMainFrame = [GetNullableObjectAtIndex(list, 0) boolValue];
  pigeonResult.request = [BTNSUrlRequestData nullableFromList:(GetNullableObjectAtIndex(list, 1))];
  return pigeonResult;
}
+ (nullable BTWKFrameInfoData *)nullableFromList:(NSArray *)list {
  return (list) ? [BTWKFrameInfoData fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
          @(self.isMainFrame),
          (self.request ? [self.request toList] : [NSNull null]),
  ];
}
@end

@implementation BTNSErrorData
+ (instancetype)makeWithCode:(NSInteger)code
                      domain:(NSString *)domain
                    userInfo:(nullable NSDictionary<NSString *, id> *)userInfo {
  BTNSErrorData *pigeonResult = [[BTNSErrorData alloc] init];
  pigeonResult.code = code;
  pigeonResult.domain = domain;
  pigeonResult.userInfo = userInfo;
  return pigeonResult;
}
+ (BTNSErrorData *)fromList:(NSArray *)list {
  BTNSErrorData *pigeonResult = [[BTNSErrorData alloc] init];
  pigeonResult.code = [GetNullableObjectAtIndex(list, 0) integerValue];
  pigeonResult.domain = GetNullableObjectAtIndex(list, 1);
  pigeonResult.userInfo = GetNullableObjectAtIndex(list, 2);
  return pigeonResult;
}
+ (nullable BTNSErrorData *)nullableFromList:(NSArray *)list {
  return (list) ? [BTNSErrorData fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
          @(self.code),
          self.domain ?: [NSNull null],
          self.userInfo ?: [NSNull null],
  ];
}
@end

@implementation BTWKScriptMessageData
+ (instancetype)makeWithName:(NSString *)name body:(nullable id)body {
  BTWKScriptMessageData *pigeonResult = [[BTWKScriptMessageData alloc] init];
  pigeonResult.name = name;
  pigeonResult.body = body;
  return pigeonResult;
}
+ (BTWKScriptMessageData *)fromList:(NSArray *)list {
  BTWKScriptMessageData *pigeonResult = [[BTWKScriptMessageData alloc] init];
  pigeonResult.name = GetNullableObjectAtIndex(list, 0);
  pigeonResult.body = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable BTWKScriptMessageData *)nullableFromList:(NSArray *)list {
  return (list) ? [BTWKScriptMessageData fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
          self.name ?: [NSNull null],
          self.body ?: [NSNull null],
  ];
}
@end

@implementation BTWKSecurityOriginData
+ (instancetype)makeWithHost:(NSString *)host port:(NSInteger)port protocol:(NSString *)protocol {
  BTWKSecurityOriginData *pigeonResult = [[BTWKSecurityOriginData alloc] init];
  pigeonResult.host = host;
  pigeonResult.port = port;
  pigeonResult.protocol = protocol;
  return pigeonResult;
}
+ (BTWKSecurityOriginData *)fromList:(NSArray *)list {
  BTWKSecurityOriginData *pigeonResult = [[BTWKSecurityOriginData alloc] init];
  pigeonResult.host = GetNullableObjectAtIndex(list, 0);
  pigeonResult.port = [GetNullableObjectAtIndex(list, 1) integerValue];
  pigeonResult.protocol = GetNullableObjectAtIndex(list, 2);
  return pigeonResult;
}
+ (nullable BTWKSecurityOriginData *)nullableFromList:(NSArray *)list {
  return (list) ? [BTWKSecurityOriginData fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
          self.host ?: [NSNull null],
          @(self.port),
          self.protocol ?: [NSNull null],
  ];
}
@end

@implementation BTNSHttpCookieData
+ (instancetype)makeWithPropertyKeys:(NSArray<BTNSHttpCookiePropertyKeyEnumData *> *)propertyKeys
        propertyValues:(NSArray<id> *)propertyValues {
  BTNSHttpCookieData *pigeonResult = [[BTNSHttpCookieData alloc] init];
  pigeonResult.propertyKeys = propertyKeys;
  pigeonResult.propertyValues = propertyValues;
  return pigeonResult;
}
+ (BTNSHttpCookieData *)fromList:(NSArray *)list {
  BTNSHttpCookieData *pigeonResult = [[BTNSHttpCookieData alloc] init];
  pigeonResult.propertyKeys = GetNullableObjectAtIndex(list, 0);
  pigeonResult.propertyValues = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable BTNSHttpCookieData *)nullableFromList:(NSArray *)list {
  return (list) ? [BTNSHttpCookieData fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
          self.propertyKeys ?: [NSNull null],
          self.propertyValues ?: [NSNull null],
  ];
}
@end

@implementation BTObjectOrIdentifier
+ (instancetype)makeWithValue:(nullable id)value isIdentifier:(BOOL)isIdentifier {
  BTObjectOrIdentifier *pigeonResult = [[BTObjectOrIdentifier alloc] init];
  pigeonResult.value = value;
  pigeonResult.isIdentifier = isIdentifier;
  return pigeonResult;
}
+ (BTObjectOrIdentifier *)fromList:(NSArray *)list {
  BTObjectOrIdentifier *pigeonResult = [[BTObjectOrIdentifier alloc] init];
  pigeonResult.value = GetNullableObjectAtIndex(list, 0);
  pigeonResult.isIdentifier = [GetNullableObjectAtIndex(list, 1) boolValue];
  return pigeonResult;
}
+ (nullable BTObjectOrIdentifier *)nullableFromList:(NSArray *)list {
  return (list) ? [BTObjectOrIdentifier fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
          self.value ?: [NSNull null],
          @(self.isIdentifier),
  ];
}
@end

@implementation BTAuthenticationChallengeResponse
+ (instancetype)makeWithDisposition:(BTNSUrlSessionAuthChallengeDisposition)disposition
               credentialIdentifier:(nullable NSNumber *)credentialIdentifier {
  BTAuthenticationChallengeResponse *pigeonResult =
          [[BTAuthenticationChallengeResponse alloc] init];
  pigeonResult.disposition = disposition;
  pigeonResult.credentialIdentifier = credentialIdentifier;
  return pigeonResult;
}
+ (BTAuthenticationChallengeResponse *)fromList:(NSArray *)list {
  BTAuthenticationChallengeResponse *pigeonResult =
          [[BTAuthenticationChallengeResponse alloc] init];
  pigeonResult.disposition = [GetNullableObjectAtIndex(list, 0) integerValue];
  pigeonResult.credentialIdentifier = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable BTAuthenticationChallengeResponse *)nullableFromList:(NSArray *)list {
  return (list) ? [BTAuthenticationChallengeResponse fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
          @(self.disposition),
          self.credentialIdentifier ?: [NSNull null],
  ];
}
@end

@interface BTWKWebsiteDataStoreHostApiCodecReader : FlutterStandardReader
@end
@implementation BTWKWebsiteDataStoreHostApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128:
      return [BTWKWebsiteDataTypeEnumData fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface BTWKWebsiteDataStoreHostApiCodecWriter : FlutterStandardWriter
@end
@implementation BTWKWebsiteDataStoreHostApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[BTWKWebsiteDataTypeEnumData class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface BTWKWebsiteDataStoreHostApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation BTWKWebsiteDataStoreHostApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[BTWKWebsiteDataStoreHostApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[BTWKWebsiteDataStoreHostApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *BTWKWebsiteDataStoreHostApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
      BTWKWebsiteDataStoreHostApiCodecReaderWriter *readerWriter =
              [[BTWKWebsiteDataStoreHostApiCodecReaderWriter alloc] init];
      sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void SetUpBTWKWebsiteDataStoreHostApi(id<FlutterBinaryMessenger> binaryMessenger,
                                       NSObject<BTWKWebsiteDataStoreHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:@"dev.flutter.pigeon.webview_flutter_wkwebview.WKWebsiteDataStoreHostApi."
                         @"createFromWebViewConfiguration"
         binaryMessenger:binaryMessenger
                   codec:BTWKWebsiteDataStoreHostApiGetCodec()];
    if (api) {
      NSCAssert(
              [api respondsToSelector:@selector(createFromWebViewConfigurationWithIdentifier:
                      configurationIdentifier:error:)],
              @"BTWKWebsiteDataStoreHostApi api (%@) doesn't respond to "
              @"@selector(createFromWebViewConfigurationWithIdentifier:configurationIdentifier:error:)",
              api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          NSInteger arg_configurationIdentifier = [GetNullableObjectAtIndex(args, 1) integerValue];
          FlutterError *error;
          [api createFromWebViewConfigurationWithIdentifier:arg_identifier
                                    configurationIdentifier:arg_configurationIdentifier
                                                      error:&error];
          callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:@"dev.flutter.pigeon.webview_flutter_wkwebview.WKWebsiteDataStoreHostApi."
                         @"createDefaultDataStore"
         binaryMessenger:binaryMessenger
                   codec:BTWKWebsiteDataStoreHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(createDefaultDataStoreWithIdentifier:error:)],
                @"BTWKWebsiteDataStoreHostApi api (%@) doesn't respond to "
                @"@selector(createDefaultDataStoreWithIdentifier:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          FlutterError *error;
          [api createDefaultDataStoreWithIdentifier:arg_identifier error:&error];
          callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:@"dev.flutter.pigeon.webview_flutter_wkwebview.WKWebsiteDataStoreHostApi."
                         @"removeDataOfTypes"
         binaryMessenger:binaryMessenger
                   codec:BTWKWebsiteDataStoreHostApiGetCodec()];
    if (api) {
      NSCAssert(
              [api respondsToSelector:@selector
              (removeDataFromDataStoreWithIdentifier:ofTypes:modifiedSince:completion:)],
              @"BTWKWebsiteDataStoreHostApi api (%@) doesn't respond to "
              @"@selector(removeDataFromDataStoreWithIdentifier:ofTypes:modifiedSince:completion:)",
              api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          NSArray<BTWKWebsiteDataTypeEnumData *> *arg_dataTypes = GetNullableObjectAtIndex(args, 1);
          double arg_modificationTimeInSecondsSinceEpoch =
                  [GetNullableObjectAtIndex(args, 2) doubleValue];
          [api removeDataFromDataStoreWithIdentifier:arg_identifier
                                             ofTypes:arg_dataTypes
                                       modifiedSince:arg_modificationTimeInSecondsSinceEpoch
                                          completion:^(NSNumber *_Nullable output,
                                                       FlutterError *_Nullable error) {
                                              callback(wrapResult(output, error));
                                          }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
NSObject<FlutterMessageCodec> *BTUIViewHostApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

void SetUpBTUIViewHostApi(id<FlutterBinaryMessenger> binaryMessenger,
                           NSObject<BTUIViewHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:
                    @"dev.flutter.pigeon.webview_flutter_wkwebview.UIViewHostApi.setBackgroundColor"
         binaryMessenger:binaryMessenger
                   codec:BTUIViewHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setBackgroundColorForViewWithIdentifier:
                        toValue:error:)],
                @"BTUIViewHostApi api (%@) doesn't respond to "
                @"@selector(setBackgroundColorForViewWithIdentifier:toValue:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          NSNumber *arg_value = GetNullableObjectAtIndex(args, 1);
          FlutterError *error;
          [api setBackgroundColorForViewWithIdentifier:arg_identifier toValue:arg_value error:&error];
          callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:@"dev.flutter.pigeon.webview_flutter_wkwebview.UIViewHostApi.setOpaque"
         binaryMessenger:binaryMessenger
                   codec:BTUIViewHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setOpaqueForViewWithIdentifier:isOpaque:error:)],
                @"BTUIViewHostApi api (%@) doesn't respond to "
                @"@selector(setOpaqueForViewWithIdentifier:isOpaque:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          BOOL arg_opaque = [GetNullableObjectAtIndex(args, 1) boolValue];
          FlutterError *error;
          [api setOpaqueForViewWithIdentifier:arg_identifier isOpaque:arg_opaque error:&error];
          callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
NSObject<FlutterMessageCodec> *BTUIScrollViewHostApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

void SetUpBTUIScrollViewHostApi(id<FlutterBinaryMessenger> binaryMessenger,
                                 NSObject<BTUIScrollViewHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:
                    @"dev.flutter.pigeon.webview_flutter_wkwebview.UIScrollViewHostApi.createFromWebView"
         binaryMessenger:binaryMessenger
                   codec:BTUIScrollViewHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(createFromWebViewWithIdentifier:
                        webViewIdentifier:error:)],
                @"BTUIScrollViewHostApi api (%@) doesn't respond to "
                @"@selector(createFromWebViewWithIdentifier:webViewIdentifier:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          NSInteger arg_webViewIdentifier = [GetNullableObjectAtIndex(args, 1) integerValue];
          FlutterError *error;
          [api createFromWebViewWithIdentifier:arg_identifier
                             webViewIdentifier:arg_webViewIdentifier
                                         error:&error];
          callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:
                    @"dev.flutter.pigeon.webview_flutter_wkwebview.UIScrollViewHostApi.getContentOffset"
         binaryMessenger:binaryMessenger
                   codec:BTUIScrollViewHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(contentOffsetForScrollViewWithIdentifier:error:)],
                @"BTUIScrollViewHostApi api (%@) doesn't respond to "
                @"@selector(contentOffsetForScrollViewWithIdentifier:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          FlutterError *error;
          NSArray<NSNumber *> *output = [api contentOffsetForScrollViewWithIdentifier:arg_identifier
                                                                                error:&error];
          callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:@"dev.flutter.pigeon.webview_flutter_wkwebview.UIScrollViewHostApi.scrollBy"
         binaryMessenger:binaryMessenger
                   codec:BTUIScrollViewHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(scrollByForScrollViewWithIdentifier:x:y:error:)],
                @"BTUIScrollViewHostApi api (%@) doesn't respond to "
                @"@selector(scrollByForScrollViewWithIdentifier:x:y:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          double arg_x = [GetNullableObjectAtIndex(args, 1) doubleValue];
          double arg_y = [GetNullableObjectAtIndex(args, 2) doubleValue];
          FlutterError *error;
          [api scrollByForScrollViewWithIdentifier:arg_identifier x:arg_x y:arg_y error:&error];
          callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:
                    @"dev.flutter.pigeon.webview_flutter_wkwebview.UIScrollViewHostApi.setContentOffset"
         binaryMessenger:binaryMessenger
                   codec:BTUIScrollViewHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector
                (setContentOffsetForScrollViewWithIdentifier:toX:y:error:)],
                @"BTUIScrollViewHostApi api (%@) doesn't respond to "
                @"@selector(setContentOffsetForScrollViewWithIdentifier:toX:y:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          double arg_x = [GetNullableObjectAtIndex(args, 1) doubleValue];
          double arg_y = [GetNullableObjectAtIndex(args, 2) doubleValue];
          FlutterError *error;
          [api setContentOffsetForScrollViewWithIdentifier:arg_identifier
                                                       toX:arg_x
                                                         y:arg_y
                                                     error:&error];
          callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:
                    @"dev.flutter.pigeon.webview_flutter_wkwebview.UIScrollViewHostApi.setDelegate"
         binaryMessenger:binaryMessenger
                   codec:BTUIScrollViewHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setDelegateForScrollViewWithIdentifier:
                        uiScrollViewDelegateIdentifier:error:)],
                @"BTUIScrollViewHostApi api (%@) doesn't respond to "
                @"@selector(setDelegateForScrollViewWithIdentifier:uiScrollViewDelegateIdentifier:"
                @"error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          NSNumber *arg_uiScrollViewDelegateIdentifier = GetNullableObjectAtIndex(args, 1);
          FlutterError *error;
          [api setDelegateForScrollViewWithIdentifier:arg_identifier
                       uiScrollViewDelegateIdentifier:arg_uiScrollViewDelegateIdentifier
                                                error:&error];
          callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface BTWKWebViewConfigurationHostApiCodecReader : FlutterStandardReader
@end
@implementation BTWKWebViewConfigurationHostApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128:
      return [BTWKAudiovisualMediaTypeEnumData fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface BTWKWebViewConfigurationHostApiCodecWriter : FlutterStandardWriter
@end
@implementation BTWKWebViewConfigurationHostApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[BTWKAudiovisualMediaTypeEnumData class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface BTWKWebViewConfigurationHostApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation BTWKWebViewConfigurationHostApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[BTWKWebViewConfigurationHostApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[BTWKWebViewConfigurationHostApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *BTWKWebViewConfigurationHostApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
      BTWKWebViewConfigurationHostApiCodecReaderWriter *readerWriter =
              [[BTWKWebViewConfigurationHostApiCodecReaderWriter alloc] init];
      sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void SetUpBTWKWebViewConfigurationHostApi(id<FlutterBinaryMessenger> binaryMessenger,
                                           NSObject<BTWKWebViewConfigurationHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:
                    @"dev.flutter.pigeon.webview_flutter_wkwebview.WKWebViewConfigurationHostApi.create"
         binaryMessenger:binaryMessenger
                   codec:BTWKWebViewConfigurationHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(createWithIdentifier:error:)],
                @"BTWKWebViewConfigurationHostApi api (%@) doesn't respond to "
                @"@selector(createWithIdentifier:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          FlutterError *error;
          [api createWithIdentifier:arg_identifier error:&error];
          callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:@"dev.flutter.pigeon.webview_flutter_wkwebview."
                         @"WKWebViewConfigurationHostApi.createFromWebView"
         binaryMessenger:binaryMessenger
                   codec:BTWKWebViewConfigurationHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(createFromWebViewWithIdentifier:
                        webViewIdentifier:error:)],
                @"BTWKWebViewConfigurationHostApi api (%@) doesn't respond to "
                @"@selector(createFromWebViewWithIdentifier:webViewIdentifier:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          NSInteger arg_webViewIdentifier = [GetNullableObjectAtIndex(args, 1) integerValue];
          FlutterError *error;
          [api createFromWebViewWithIdentifier:arg_identifier
                             webViewIdentifier:arg_webViewIdentifier
                                         error:&error];
          callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:@"dev.flutter.pigeon.webview_flutter_wkwebview."
                         @"WKWebViewConfigurationHostApi.setAllowsInlineMediaPlayback"
         binaryMessenger:binaryMessenger
                   codec:BTWKWebViewConfigurationHostApiGetCodec()];
    if (api) {
      NSCAssert(
              [api respondsToSelector:@selector
              (setAllowsInlineMediaPlaybackForConfigurationWithIdentifier:isAllowed:error:)],
              @"BTWKWebViewConfigurationHostApi api (%@) doesn't respond to "
              @"@selector(setAllowsInlineMediaPlaybackForConfigurationWithIdentifier:isAllowed:error:)",
              api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          BOOL arg_allow = [GetNullableObjectAtIndex(args, 1) boolValue];
          FlutterError *error;
          [api setAllowsInlineMediaPlaybackForConfigurationWithIdentifier:arg_identifier
                                                                isAllowed:arg_allow
                                                                    error:&error];
          callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:@"dev.flutter.pigeon.webview_flutter_wkwebview."
                         @"WKWebViewConfigurationHostApi.setLimitsNavigationsToAppBoundDomains"
         binaryMessenger:binaryMessenger
                   codec:BTWKWebViewConfigurationHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector
                (setLimitsNavigationsToAppBoundDomainsForConfigurationWithIdentifier:
                        isLimited:error:)],
                @"BTWKWebViewConfigurationHostApi api (%@) doesn't respond to "
                @"@selector(setLimitsNavigationsToAppBoundDomainsForConfigurationWithIdentifier:"
                @"isLimited:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          BOOL arg_limit = [GetNullableObjectAtIndex(args, 1) boolValue];
          FlutterError *error;
          [api setLimitsNavigationsToAppBoundDomainsForConfigurationWithIdentifier:arg_identifier
                                                                         isLimited:arg_limit
                                                                             error:&error];
          callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:@"dev.flutter.pigeon.webview_flutter_wkwebview."
                         @"WKWebViewConfigurationHostApi.setMediaTypesRequiringUserActionForPlayback"
         binaryMessenger:binaryMessenger
                   codec:BTWKWebViewConfigurationHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector
                (setMediaTypesRequiresUserActionForConfigurationWithIdentifier:
                        forTypes:error:)],
                @"BTWKWebViewConfigurationHostApi api (%@) doesn't respond to "
                @"@selector(setMediaTypesRequiresUserActionForConfigurationWithIdentifier:forTypes:"
                @"error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          NSArray<BTWKAudiovisualMediaTypeEnumData *> *arg_types = GetNullableObjectAtIndex(args, 1);
          FlutterError *error;
          [api setMediaTypesRequiresUserActionForConfigurationWithIdentifier:arg_identifier
                                                                    forTypes:arg_types
                                                                       error:&error];
          callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
NSObject<FlutterMessageCodec> *BTWKWebViewConfigurationFlutterApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

@interface BTWKWebViewConfigurationFlutterApi ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation BTWKWebViewConfigurationFlutterApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)createWithIdentifier:(NSInteger)arg_identifier
                  completion:(void (^)(FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
          messageChannelWithName:
                  @"dev.flutter.pigeon.webview_flutter_wkwebview.WKWebViewConfigurationFlutterApi.create"
                 binaryMessenger:self.binaryMessenger
                           codec:BTWKWebViewConfigurationFlutterApiGetCodec()];
  [channel
          sendMessage:@[ @(arg_identifier) ]
                reply:^(NSArray<id> *reply) {
                    if (reply != nil) {
                      if (reply.count > 1) {
                        completion([FlutterError errorWithCode:reply[0]
                                                       message:reply[1]
                                                       details:reply[2]]);
                      } else {
                        completion(nil);
                      }
                    } else {
                      completion([FlutterError errorWithCode:@"channel-error"
                                                     message:@"Unable to establish connection on channel."
                                                     details:@""]);
                    }
                }];
}
@end

@interface BTWKUserContentControllerHostApiCodecReader : FlutterStandardReader
@end
@implementation BTWKUserContentControllerHostApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128:
      return [BTWKUserScriptData fromList:[self readValue]];
    case 129:
      return [BTWKUserScriptInjectionTimeEnumData fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface BTWKUserContentControllerHostApiCodecWriter : FlutterStandardWriter
@end
@implementation BTWKUserContentControllerHostApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[BTWKUserScriptData class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[BTWKUserScriptInjectionTimeEnumData class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface BTWKUserContentControllerHostApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation BTWKUserContentControllerHostApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[BTWKUserContentControllerHostApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[BTWKUserContentControllerHostApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *BTWKUserContentControllerHostApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
      BTWKUserContentControllerHostApiCodecReaderWriter *readerWriter =
              [[BTWKUserContentControllerHostApiCodecReaderWriter alloc] init];
      sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void SetUpBTWKUserContentControllerHostApi(id<FlutterBinaryMessenger> binaryMessenger,
                                            NSObject<BTWKUserContentControllerHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:@"dev.flutter.pigeon.webview_flutter_wkwebview."
                         @"WKUserContentControllerHostApi.createFromWebViewConfiguration"
         binaryMessenger:binaryMessenger
                   codec:BTWKUserContentControllerHostApiGetCodec()];
    if (api) {
      NSCAssert(
              [api respondsToSelector:@selector(createFromWebViewConfigurationWithIdentifier:
                      configurationIdentifier:error:)],
              @"BTWKUserContentControllerHostApi api (%@) doesn't respond to "
              @"@selector(createFromWebViewConfigurationWithIdentifier:configurationIdentifier:error:)",
              api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          NSInteger arg_configurationIdentifier = [GetNullableObjectAtIndex(args, 1) integerValue];
          FlutterError *error;
          [api createFromWebViewConfigurationWithIdentifier:arg_identifier
                                    configurationIdentifier:arg_configurationIdentifier
                                                      error:&error];
          callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:@"dev.flutter.pigeon.webview_flutter_wkwebview."
                         @"WKUserContentControllerHostApi.addScriptMessageHandler"
         binaryMessenger:binaryMessenger
                   codec:BTWKUserContentControllerHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector
                (addScriptMessageHandlerForControllerWithIdentifier:
                        handlerIdentifier:ofName:error:)],
                @"BTWKUserContentControllerHostApi api (%@) doesn't respond to "
                @"@selector(addScriptMessageHandlerForControllerWithIdentifier:handlerIdentifier:"
                @"ofName:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          NSInteger arg_handlerIdentifier = [GetNullableObjectAtIndex(args, 1) integerValue];
          NSString *arg_name = GetNullableObjectAtIndex(args, 2);
          FlutterError *error;
          [api addScriptMessageHandlerForControllerWithIdentifier:arg_identifier
                                                handlerIdentifier:arg_handlerIdentifier
                                                           ofName:arg_name
                                                            error:&error];
          callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:@"dev.flutter.pigeon.webview_flutter_wkwebview."
                         @"WKUserContentControllerHostApi.removeScriptMessageHandler"
         binaryMessenger:binaryMessenger
                   codec:BTWKUserContentControllerHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector
                (removeScriptMessageHandlerForControllerWithIdentifier:name:error:)],
                @"BTWKUserContentControllerHostApi api (%@) doesn't respond to "
                @"@selector(removeScriptMessageHandlerForControllerWithIdentifier:name:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          NSString *arg_name = GetNullableObjectAtIndex(args, 1);
          FlutterError *error;
          [api removeScriptMessageHandlerForControllerWithIdentifier:arg_identifier
                                                                name:arg_name
                                                               error:&error];
          callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:@"dev.flutter.pigeon.webview_flutter_wkwebview."
                         @"WKUserContentControllerHostApi.removeAllScriptMessageHandlers"
         binaryMessenger:binaryMessenger
                   codec:BTWKUserContentControllerHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector
                (removeAllScriptMessageHandlersForControllerWithIdentifier:error:)],
                @"BTWKUserContentControllerHostApi api (%@) doesn't respond to "
                @"@selector(removeAllScriptMessageHandlersForControllerWithIdentifier:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          FlutterError *error;
          [api removeAllScriptMessageHandlersForControllerWithIdentifier:arg_identifier error:&error];
          callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:@"dev.flutter.pigeon.webview_flutter_wkwebview."
                         @"WKUserContentControllerHostApi.addUserScript"
         binaryMessenger:binaryMessenger
                   codec:BTWKUserContentControllerHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(addUserScriptForControllerWithIdentifier:
                        userScript:error:)],
                @"BTWKUserContentControllerHostApi api (%@) doesn't respond to "
                @"@selector(addUserScriptForControllerWithIdentifier:userScript:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          BTWKUserScriptData *arg_userScript = GetNullableObjectAtIndex(args, 1);
          FlutterError *error;
          [api addUserScriptForControllerWithIdentifier:arg_identifier
                                             userScript:arg_userScript
                                                  error:&error];
          callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:@"dev.flutter.pigeon.webview_flutter_wkwebview."
                         @"WKUserContentControllerHostApi.removeAllUserScripts"
         binaryMessenger:binaryMessenger
                   codec:BTWKUserContentControllerHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector
                (removeAllUserScriptsForControllerWithIdentifier:error:)],
                @"BTWKUserContentControllerHostApi api (%@) doesn't respond to "
                @"@selector(removeAllUserScriptsForControllerWithIdentifier:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          FlutterError *error;
          [api removeAllUserScriptsForControllerWithIdentifier:arg_identifier error:&error];
          callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
NSObject<FlutterMessageCodec> *BTWKPreferencesHostApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

void SetUpBTWKPreferencesHostApi(id<FlutterBinaryMessenger> binaryMessenger,
                                  NSObject<BTWKPreferencesHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:@"dev.flutter.pigeon.webview_flutter_wkwebview.WKPreferencesHostApi."
                         @"createFromWebViewConfiguration"
         binaryMessenger:binaryMessenger
                   codec:BTWKPreferencesHostApiGetCodec()];
    if (api) {
      NSCAssert(
              [api respondsToSelector:@selector(createFromWebViewConfigurationWithIdentifier:
                      configurationIdentifier:error:)],
              @"BTWKPreferencesHostApi api (%@) doesn't respond to "
              @"@selector(createFromWebViewConfigurationWithIdentifier:configurationIdentifier:error:)",
              api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          NSInteger arg_configurationIdentifier = [GetNullableObjectAtIndex(args, 1) integerValue];
          FlutterError *error;
          [api createFromWebViewConfigurationWithIdentifier:arg_identifier
                                    configurationIdentifier:arg_configurationIdentifier
                                                      error:&error];
          callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:@"dev.flutter.pigeon.webview_flutter_wkwebview.WKPreferencesHostApi."
                         @"setJavaScriptEnabled"
         binaryMessenger:binaryMessenger
                   codec:BTWKPreferencesHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector
                (setJavaScriptEnabledForPreferencesWithIdentifier:isEnabled:error:)],
                @"BTWKPreferencesHostApi api (%@) doesn't respond to "
                @"@selector(setJavaScriptEnabledForPreferencesWithIdentifier:isEnabled:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          BOOL arg_enabled = [GetNullableObjectAtIndex(args, 1) boolValue];
          FlutterError *error;
          [api setJavaScriptEnabledForPreferencesWithIdentifier:arg_identifier
                                                      isEnabled:arg_enabled
                                                          error:&error];
          callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
NSObject<FlutterMessageCodec> *BTWKScriptMessageHandlerHostApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

void SetUpBTWKScriptMessageHandlerHostApi(id<FlutterBinaryMessenger> binaryMessenger,
                                           NSObject<BTWKScriptMessageHandlerHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:
                    @"dev.flutter.pigeon.webview_flutter_wkwebview.WKScriptMessageHandlerHostApi.create"
         binaryMessenger:binaryMessenger
                   codec:BTWKScriptMessageHandlerHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(createWithIdentifier:error:)],
                @"BTWKScriptMessageHandlerHostApi api (%@) doesn't respond to "
                @"@selector(createWithIdentifier:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          FlutterError *error;
          [api createWithIdentifier:arg_identifier error:&error];
          callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface BTWKScriptMessageHandlerFlutterApiCodecReader : FlutterStandardReader
@end
@implementation BTWKScriptMessageHandlerFlutterApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128:
      return [BTWKScriptMessageData fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface BTWKScriptMessageHandlerFlutterApiCodecWriter : FlutterStandardWriter
@end
@implementation BTWKScriptMessageHandlerFlutterApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[BTWKScriptMessageData class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface BTWKScriptMessageHandlerFlutterApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation BTWKScriptMessageHandlerFlutterApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[BTWKScriptMessageHandlerFlutterApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[BTWKScriptMessageHandlerFlutterApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *BTWKScriptMessageHandlerFlutterApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
      BTWKScriptMessageHandlerFlutterApiCodecReaderWriter *readerWriter =
              [[BTWKScriptMessageHandlerFlutterApiCodecReaderWriter alloc] init];
      sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

@interface BTWKScriptMessageHandlerFlutterApi ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation BTWKScriptMessageHandlerFlutterApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)
didReceiveScriptMessageForHandlerWithIdentifier:(NSInteger)arg_identifier
                userContentControllerIdentifier:(NSInteger)arg_userContentControllerIdentifier
                                        message:(BTWKScriptMessageData *)arg_message
                                     completion:(void (^)(FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
          messageChannelWithName:@"dev.flutter.pigeon.webview_flutter_wkwebview."
                                 @"WKScriptMessageHandlerFlutterApi.didReceiveScriptMessage"
                 binaryMessenger:self.binaryMessenger
                           codec:BTWKScriptMessageHandlerFlutterApiGetCodec()];
  [channel
          sendMessage:@[
                  @(arg_identifier), @(arg_userContentControllerIdentifier), arg_message ?: [NSNull null]
          ]
                reply:^(NSArray<id> *reply) {
                    if (reply != nil) {
                      if (reply.count > 1) {
                        completion([FlutterError errorWithCode:reply[0]
                                                       message:reply[1]
                                                       details:reply[2]]);
                      } else {
                        completion(nil);
                      }
                    } else {
                      completion([FlutterError errorWithCode:@"channel-error"
                                                     message:@"Unable to establish connection on channel."
                                                     details:@""]);
                    }
                }];
}
@end

NSObject<FlutterMessageCodec> *BTWKNavigationDelegateHostApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

void SetUpBTWKNavigationDelegateHostApi(id<FlutterBinaryMessenger> binaryMessenger,
                                         NSObject<BTWKNavigationDelegateHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:
                    @"dev.flutter.pigeon.webview_flutter_wkwebview.WKNavigationDelegateHostApi.create"
         binaryMessenger:binaryMessenger
                   codec:BTWKNavigationDelegateHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(createWithIdentifier:error:)],
                @"BTWKNavigationDelegateHostApi api (%@) doesn't respond to "
                @"@selector(createWithIdentifier:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          FlutterError *error;
          [api createWithIdentifier:arg_identifier error:&error];
          callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface BTWKNavigationDelegateFlutterApiCodecReader : FlutterStandardReader
@end
@implementation BTWKNavigationDelegateFlutterApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128:
      return [BTAuthenticationChallengeResponse fromList:[self readValue]];
    case 129:
      return [BTNSErrorData fromList:[self readValue]];
    case 130:
      return [BTNSHttpUrlResponseData fromList:[self readValue]];
    case 131:
      return [BTNSUrlRequestData fromList:[self readValue]];
    case 132:
      return [BTWKFrameInfoData fromList:[self readValue]];
    case 133:
      return [BTWKNavigationActionData fromList:[self readValue]];
    case 134:
      return [BTWKNavigationActionPolicyEnumData fromList:[self readValue]];
    case 135:
      return [BTWKNavigationResponseData fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface BTWKNavigationDelegateFlutterApiCodecWriter : FlutterStandardWriter
@end
@implementation BTWKNavigationDelegateFlutterApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[BTAuthenticationChallengeResponse class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[BTNSErrorData class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[BTNSHttpUrlResponseData class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[BTNSUrlRequestData class]]) {
    [self writeByte:131];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[BTWKFrameInfoData class]]) {
    [self writeByte:132];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[BTWKNavigationActionData class]]) {
    [self writeByte:133];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[BTWKNavigationActionPolicyEnumData class]]) {
    [self writeByte:134];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[BTWKNavigationResponseData class]]) {
    [self writeByte:135];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface BTWKNavigationDelegateFlutterApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation BTWKNavigationDelegateFlutterApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[BTWKNavigationDelegateFlutterApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[BTWKNavigationDelegateFlutterApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *BTWKNavigationDelegateFlutterApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
      BTWKNavigationDelegateFlutterApiCodecReaderWriter *readerWriter =
              [[BTWKNavigationDelegateFlutterApiCodecReaderWriter alloc] init];
      sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

@interface BTWKNavigationDelegateFlutterApi ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation BTWKNavigationDelegateFlutterApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)didFinishNavigationForDelegateWithIdentifier:(NSInteger)arg_identifier
                                   webViewIdentifier:(NSInteger)arg_webViewIdentifier
                                                 URL:(nullable NSString *)arg_url
        completion:(void (^)(FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
          messageChannelWithName:@"dev.flutter.pigeon.webview_flutter_wkwebview."
                                 @"WKNavigationDelegateFlutterApi.didFinishNavigation"
                 binaryMessenger:self.binaryMessenger
                           codec:BTWKNavigationDelegateFlutterApiGetCodec()];
  [channel
          sendMessage:@[ @(arg_identifier), @(arg_webViewIdentifier), arg_url ?: [NSNull null] ]
                reply:^(NSArray<id> *reply) {
                    if (reply != nil) {
                      if (reply.count > 1) {
                        completion([FlutterError errorWithCode:reply[0]
                                                       message:reply[1]
                                                       details:reply[2]]);
                      } else {
                        completion(nil);
                      }
                    } else {
                      completion([FlutterError errorWithCode:@"channel-error"
                                                     message:@"Unable to establish connection on channel."
                                                     details:@""]);
                    }
                }];
}
- (void)didStartProvisionalNavigationForDelegateWithIdentifier:(NSInteger)arg_identifier
                                             webViewIdentifier:(NSInteger)arg_webViewIdentifier
                                                           URL:(nullable NSString *)arg_url
        completion:(void (^)(FlutterError *_Nullable))
completion {
  FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
          messageChannelWithName:@"dev.flutter.pigeon.webview_flutter_wkwebview."
                                 @"WKNavigationDelegateFlutterApi.didStartProvisionalNavigation"
                 binaryMessenger:self.binaryMessenger
                           codec:BTWKNavigationDelegateFlutterApiGetCodec()];
  [channel
          sendMessage:@[ @(arg_identifier), @(arg_webViewIdentifier), arg_url ?: [NSNull null] ]
                reply:^(NSArray<id> *reply) {
                    if (reply != nil) {
                      if (reply.count > 1) {
                        completion([FlutterError errorWithCode:reply[0]
                                                       message:reply[1]
                                                       details:reply[2]]);
                      } else {
                        completion(nil);
                      }
                    } else {
                      completion([FlutterError errorWithCode:@"channel-error"
                                                     message:@"Unable to establish connection on channel."
                                                     details:@""]);
                    }
                }];
}
- (void)decidePolicyForNavigationActionForDelegateWithIdentifier:(NSInteger)arg_identifier
                                               webViewIdentifier:(NSInteger)arg_webViewIdentifier
                                                navigationAction:(BTWKNavigationActionData *)
                                                        arg_navigationAction
                                                      completion:
                                                              (void (^)(
                                                              BTWKNavigationActionPolicyEnumData
                                                              *_Nullable,
                                                              FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
          messageChannelWithName:@"dev.flutter.pigeon.webview_flutter_wkwebview."
                                 @"WKNavigationDelegateFlutterApi.decidePolicyForNavigationAction"
                 binaryMessenger:self.binaryMessenger
                           codec:BTWKNavigationDelegateFlutterApiGetCodec()];
  [channel sendMessage:@[
                  @(arg_identifier), @(arg_webViewIdentifier), arg_navigationAction ?: [NSNull null]
          ]
                 reply:^(NSArray<id> *reply) {
                     if (reply != nil) {
                       if (reply.count > 1) {
                         completion(nil, [FlutterError errorWithCode:reply[0]
                                                             message:reply[1]
                                                             details:reply[2]]);
                       } else {
                         BTWKNavigationActionPolicyEnumData *output =
                                 reply[0] == [NSNull null] ? nil : reply[0];
                         completion(output, nil);
                       }
                     } else {
                       completion(nil, [FlutterError
                               errorWithCode:@"channel-error"
                                     message:@"Unable to establish connection on channel."
                                     details:@""]);
                     }
                 }];
}
- (void)decidePolicyForNavigationResponseForDelegateWithIdentifier:(NSInteger)arg_identifier
                                                 webViewIdentifier:(NSInteger)arg_webViewIdentifier
                                                navigationResponse:(BTWKNavigationResponseData *)
                                                        arg_navigationResponse
                                                        completion:
                                                                (void (^)(
                                                                BTWKNavigationResponsePolicyEnumBox
                                                                *_Nullable,
                                                                FlutterError *_Nullable))
                                                                completion {
  FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
          messageChannelWithName:@"dev.flutter.pigeon.webview_flutter_wkwebview."
                                 @"WKNavigationDelegateFlutterApi.decidePolicyForNavigationResponse"
                 binaryMessenger:self.binaryMessenger
                           codec:BTWKNavigationDelegateFlutterApiGetCodec()];
  [channel sendMessage:@[
                  @(arg_identifier), @(arg_webViewIdentifier), arg_navigationResponse ?: [NSNull null]
          ]
                 reply:^(NSArray<id> *reply) {
                     if (reply != nil) {
                       if (reply.count > 1) {
                         completion(nil, [FlutterError errorWithCode:reply[0]
                                                             message:reply[1]
                                                             details:reply[2]]);
                       } else {
                         NSNumber *outputAsNumber = reply[0] == [NSNull null] ? nil : reply[0];
                         BTWKNavigationResponsePolicyEnumBox *output =
                                 outputAsNumber == nil ? nil
                                                       : [[BTWKNavigationResponsePolicyEnumBox alloc]
                                         initWithValue:[outputAsNumber integerValue]];
                         completion(output, nil);
                       }
                     } else {
                       completion(nil, [FlutterError
                               errorWithCode:@"channel-error"
                                     message:@"Unable to establish connection on channel."
                                     details:@""]);
                     }
                 }];
}
- (void)didFailNavigationForDelegateWithIdentifier:(NSInteger)arg_identifier
                                 webViewIdentifier:(NSInteger)arg_webViewIdentifier
                                             error:(BTNSErrorData *)arg_error
                                        completion:(void (^)(FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
          messageChannelWithName:@"dev.flutter.pigeon.webview_flutter_wkwebview."
                                 @"WKNavigationDelegateFlutterApi.didFailNavigation"
                 binaryMessenger:self.binaryMessenger
                           codec:BTWKNavigationDelegateFlutterApiGetCodec()];
  [channel
          sendMessage:@[ @(arg_identifier), @(arg_webViewIdentifier), arg_error ?: [NSNull null] ]
                reply:^(NSArray<id> *reply) {
                    if (reply != nil) {
                      if (reply.count > 1) {
                        completion([FlutterError errorWithCode:reply[0]
                                                       message:reply[1]
                                                       details:reply[2]]);
                      } else {
                        completion(nil);
                      }
                    } else {
                      completion([FlutterError errorWithCode:@"channel-error"
                                                     message:@"Unable to establish connection on channel."
                                                     details:@""]);
                    }
                }];
}
- (void)didFailProvisionalNavigationForDelegateWithIdentifier:(NSInteger)arg_identifier
                                            webViewIdentifier:(NSInteger)arg_webViewIdentifier
                                                        error:(BTNSErrorData *)arg_error
                                                   completion:(void (^)(FlutterError *_Nullable))
                                                           completion {
  FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
          messageChannelWithName:@"dev.flutter.pigeon.webview_flutter_wkwebview."
                                 @"WKNavigationDelegateFlutterApi.didFailProvisionalNavigation"
                 binaryMessenger:self.binaryMessenger
                           codec:BTWKNavigationDelegateFlutterApiGetCodec()];
  [channel
          sendMessage:@[ @(arg_identifier), @(arg_webViewIdentifier), arg_error ?: [NSNull null] ]
                reply:^(NSArray<id> *reply) {
                    if (reply != nil) {
                      if (reply.count > 1) {
                        completion([FlutterError errorWithCode:reply[0]
                                                       message:reply[1]
                                                       details:reply[2]]);
                      } else {
                        completion(nil);
                      }
                    } else {
                      completion([FlutterError errorWithCode:@"channel-error"
                                                     message:@"Unable to establish connection on channel."
                                                     details:@""]);
                    }
                }];
}
- (void)webViewWebContentProcessDidTerminateForDelegateWithIdentifier:(NSInteger)arg_identifier
                                                    webViewIdentifier:
                                                            (NSInteger)arg_webViewIdentifier
                                                           completion:
                                                                   (void (^)(FlutterError *_Nullable))
                                                                   completion {
  FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
          messageChannelWithName:@"dev.flutter.pigeon.webview_flutter_wkwebview."
                                 @"WKNavigationDelegateFlutterApi.webViewWebContentProcessDidTerminate"
                 binaryMessenger:self.binaryMessenger
                           codec:BTWKNavigationDelegateFlutterApiGetCodec()];
  [channel
          sendMessage:@[ @(arg_identifier), @(arg_webViewIdentifier) ]
                reply:^(NSArray<id> *reply) {
                    if (reply != nil) {
                      if (reply.count > 1) {
                        completion([FlutterError errorWithCode:reply[0]
                                                       message:reply[1]
                                                       details:reply[2]]);
                      } else {
                        completion(nil);
                      }
                    } else {
                      completion([FlutterError errorWithCode:@"channel-error"
                                                     message:@"Unable to establish connection on channel."
                                                     details:@""]);
                    }
                }];
}
- (void)
didReceiveAuthenticationChallengeForDelegateWithIdentifier:(NSInteger)arg_identifier
                                         webViewIdentifier:(NSInteger)arg_webViewIdentifier
                                       challengeIdentifier:(NSInteger)arg_challengeIdentifier
                                                completion:
                                                        (void (^)(BTAuthenticationChallengeResponse
                                                                  *_Nullable,
                                                                  FlutterError *_Nullable))
                                                        completion {
  FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
          messageChannelWithName:@"dev.flutter.pigeon.webview_flutter_wkwebview."
                                 @"WKNavigationDelegateFlutterApi.didReceiveAuthenticationChallenge"
                 binaryMessenger:self.binaryMessenger
                           codec:BTWKNavigationDelegateFlutterApiGetCodec()];
  [channel sendMessage:@[ @(arg_identifier), @(arg_webViewIdentifier), @(arg_challengeIdentifier) ]
                 reply:^(NSArray<id> *reply) {
                     if (reply != nil) {
                       if (reply.count > 1) {
                         completion(nil, [FlutterError errorWithCode:reply[0]
                                                             message:reply[1]
                                                             details:reply[2]]);
                       } else {
                         BTAuthenticationChallengeResponse *output =
                                 reply[0] == [NSNull null] ? nil : reply[0];
                         completion(output, nil);
                       }
                     } else {
                       completion(nil, [FlutterError
                               errorWithCode:@"channel-error"
                                     message:@"Unable to establish connection on channel."
                                     details:@""]);
                     }
                 }];
}
@end

@interface BTNSObjectHostApiCodecReader : FlutterStandardReader
@end
@implementation BTNSObjectHostApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128:
      return [BTNSKeyValueObservingOptionsEnumData fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface BTNSObjectHostApiCodecWriter : FlutterStandardWriter
@end
@implementation BTNSObjectHostApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[BTNSKeyValueObservingOptionsEnumData class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface BTNSObjectHostApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation BTNSObjectHostApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[BTNSObjectHostApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[BTNSObjectHostApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *BTNSObjectHostApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
      BTNSObjectHostApiCodecReaderWriter *readerWriter =
              [[BTNSObjectHostApiCodecReaderWriter alloc] init];
      sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void SetUpBTNSObjectHostApi(id<FlutterBinaryMessenger> binaryMessenger,
                             NSObject<BTNSObjectHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:@"dev.flutter.pigeon.webview_flutter_wkwebview.NSObjectHostApi.dispose"
         binaryMessenger:binaryMessenger
                   codec:BTNSObjectHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(disposeObjectWithIdentifier:error:)],
                @"BTNSObjectHostApi api (%@) doesn't respond to "
                @"@selector(disposeObjectWithIdentifier:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          FlutterError *error;
          [api disposeObjectWithIdentifier:arg_identifier error:&error];
          callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:@"dev.flutter.pigeon.webview_flutter_wkwebview.NSObjectHostApi.addObserver"
         binaryMessenger:binaryMessenger
                   codec:BTNSObjectHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector
                (addObserverForObjectWithIdentifier:
                        observerIdentifier:keyPath:options:error:)],
                @"BTNSObjectHostApi api (%@) doesn't respond to "
                @"@selector(addObserverForObjectWithIdentifier:observerIdentifier:keyPath:options:"
                @"error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          NSInteger arg_observerIdentifier = [GetNullableObjectAtIndex(args, 1) integerValue];
          NSString *arg_keyPath = GetNullableObjectAtIndex(args, 2);
          NSArray<BTNSKeyValueObservingOptionsEnumData *> *arg_options =
                  GetNullableObjectAtIndex(args, 3);
          FlutterError *error;
          [api addObserverForObjectWithIdentifier:arg_identifier
                               observerIdentifier:arg_observerIdentifier
                                          keyPath:arg_keyPath
                                          options:arg_options
                                            error:&error];
          callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:
                    @"dev.flutter.pigeon.webview_flutter_wkwebview.NSObjectHostApi.removeObserver"
         binaryMessenger:binaryMessenger
                   codec:BTNSObjectHostApiGetCodec()];
    if (api) {
      NSCAssert(
              [api respondsToSelector:@selector(removeObserverForObjectWithIdentifier:
                      observerIdentifier:keyPath:error:)],
              @"BTNSObjectHostApi api (%@) doesn't respond to "
              @"@selector(removeObserverForObjectWithIdentifier:observerIdentifier:keyPath:error:)",
              api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          NSInteger arg_observerIdentifier = [GetNullableObjectAtIndex(args, 1) integerValue];
          NSString *arg_keyPath = GetNullableObjectAtIndex(args, 2);
          FlutterError *error;
          [api removeObserverForObjectWithIdentifier:arg_identifier
                                  observerIdentifier:arg_observerIdentifier
                                             keyPath:arg_keyPath
                                               error:&error];
          callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface BTNSObjectFlutterApiCodecReader : FlutterStandardReader
@end
@implementation BTNSObjectFlutterApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128:
      return [BTNSKeyValueChangeKeyEnumData fromList:[self readValue]];
    case 129:
      return [BTObjectOrIdentifier fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface BTNSObjectFlutterApiCodecWriter : FlutterStandardWriter
@end
@implementation BTNSObjectFlutterApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[BTNSKeyValueChangeKeyEnumData class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[BTObjectOrIdentifier class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface BTNSObjectFlutterApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation BTNSObjectFlutterApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[BTNSObjectFlutterApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[BTNSObjectFlutterApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *BTNSObjectFlutterApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
      BTNSObjectFlutterApiCodecReaderWriter *readerWriter =
              [[BTNSObjectFlutterApiCodecReaderWriter alloc] init];
      sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

@interface BTNSObjectFlutterApi ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation BTNSObjectFlutterApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)observeValueForObjectWithIdentifier:(NSInteger)arg_identifier
                                    keyPath:(NSString *)arg_keyPath
                           objectIdentifier:(NSInteger)arg_objectIdentifier
                                 changeKeys:
                                 (NSArray<BTNSKeyValueChangeKeyEnumData *> *)arg_changeKeys
        changeValues:(NSArray<BTObjectOrIdentifier *> *)arg_changeValues
        completion:(void (^)(FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
          messageChannelWithName:
                  @"dev.flutter.pigeon.webview_flutter_wkwebview.NSObjectFlutterApi.observeValue"
                 binaryMessenger:self.binaryMessenger
                           codec:BTNSObjectFlutterApiGetCodec()];
  [channel
          sendMessage:@[
                  @(arg_identifier), arg_keyPath ?: [NSNull null], @(arg_objectIdentifier),
                  arg_changeKeys ?: [NSNull null], arg_changeValues ?: [NSNull null]
          ]
                reply:^(NSArray<id> *reply) {
                    if (reply != nil) {
                      if (reply.count > 1) {
                        completion([FlutterError errorWithCode:reply[0]
                                                       message:reply[1]
                                                       details:reply[2]]);
                      } else {
                        completion(nil);
                      }
                    } else {
                      completion([FlutterError errorWithCode:@"channel-error"
                                                     message:@"Unable to establish connection on channel."
                                                     details:@""]);
                    }
                }];
}
- (void)disposeObjectWithIdentifier:(NSInteger)arg_identifier
                         completion:(void (^)(FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
          messageChannelWithName:
                  @"dev.flutter.pigeon.webview_flutter_wkwebview.NSObjectFlutterApi.dispose"
                 binaryMessenger:self.binaryMessenger
                           codec:BTNSObjectFlutterApiGetCodec()];
  [channel
          sendMessage:@[ @(arg_identifier) ]
                reply:^(NSArray<id> *reply) {
                    if (reply != nil) {
                      if (reply.count > 1) {
                        completion([FlutterError errorWithCode:reply[0]
                                                       message:reply[1]
                                                       details:reply[2]]);
                      } else {
                        completion(nil);
                      }
                    } else {
                      completion([FlutterError errorWithCode:@"channel-error"
                                                     message:@"Unable to establish connection on channel."
                                                     details:@""]);
                    }
                }];
}
@end

@interface BTWKWebViewHostApiCodecReader : FlutterStandardReader
@end
@implementation BTWKWebViewHostApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128:
      return [BTAuthenticationChallengeResponse fromList:[self readValue]];
    case 129:
      return [BTNSErrorData fromList:[self readValue]];
    case 130:
      return [BTNSHttpCookieData fromList:[self readValue]];
    case 131:
      return [BTNSHttpCookiePropertyKeyEnumData fromList:[self readValue]];
    case 132:
      return [BTNSHttpUrlResponseData fromList:[self readValue]];
    case 133:
      return [BTNSKeyValueChangeKeyEnumData fromList:[self readValue]];
    case 134:
      return [BTNSKeyValueObservingOptionsEnumData fromList:[self readValue]];
    case 135:
      return [BTNSUrlRequestData fromList:[self readValue]];
    case 136:
      return [BTObjectOrIdentifier fromList:[self readValue]];
    case 137:
      return [BTWKAudiovisualMediaTypeEnumData fromList:[self readValue]];
    case 138:
      return [BTWKFrameInfoData fromList:[self readValue]];
    case 139:
      return [BTWKMediaCaptureTypeData fromList:[self readValue]];
    case 140:
      return [BTWKNavigationActionData fromList:[self readValue]];
    case 141:
      return [BTWKNavigationActionPolicyEnumData fromList:[self readValue]];
    case 142:
      return [BTWKNavigationResponseData fromList:[self readValue]];
    case 143:
      return [BTWKPermissionDecisionData fromList:[self readValue]];
    case 144:
      return [BTWKScriptMessageData fromList:[self readValue]];
    case 145:
      return [BTWKSecurityOriginData fromList:[self readValue]];
    case 146:
      return [BTWKUserScriptData fromList:[self readValue]];
    case 147:
      return [BTWKUserScriptInjectionTimeEnumData fromList:[self readValue]];
    case 148:
      return [BTWKWebsiteDataTypeEnumData fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface BTWKWebViewHostApiCodecWriter : FlutterStandardWriter
@end
@implementation BTWKWebViewHostApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[BTAuthenticationChallengeResponse class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[BTNSErrorData class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[BTNSHttpCookieData class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[BTNSHttpCookiePropertyKeyEnumData class]]) {
    [self writeByte:131];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[BTNSHttpUrlResponseData class]]) {
    [self writeByte:132];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[BTNSKeyValueChangeKeyEnumData class]]) {
    [self writeByte:133];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[BTNSKeyValueObservingOptionsEnumData class]]) {
    [self writeByte:134];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[BTNSUrlRequestData class]]) {
    [self writeByte:135];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[BTObjectOrIdentifier class]]) {
    [self writeByte:136];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[BTWKAudiovisualMediaTypeEnumData class]]) {
    [self writeByte:137];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[BTWKFrameInfoData class]]) {
    [self writeByte:138];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[BTWKMediaCaptureTypeData class]]) {
    [self writeByte:139];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[BTWKNavigationActionData class]]) {
    [self writeByte:140];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[BTWKNavigationActionPolicyEnumData class]]) {
    [self writeByte:141];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[BTWKNavigationResponseData class]]) {
    [self writeByte:142];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[BTWKPermissionDecisionData class]]) {
    [self writeByte:143];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[BTWKScriptMessageData class]]) {
    [self writeByte:144];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[BTWKSecurityOriginData class]]) {
    [self writeByte:145];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[BTWKUserScriptData class]]) {
    [self writeByte:146];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[BTWKUserScriptInjectionTimeEnumData class]]) {
    [self writeByte:147];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[BTWKWebsiteDataTypeEnumData class]]) {
    [self writeByte:148];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface BTWKWebViewHostApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation BTWKWebViewHostApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[BTWKWebViewHostApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[BTWKWebViewHostApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *BTWKWebViewHostApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
      BTWKWebViewHostApiCodecReaderWriter *readerWriter =
              [[BTWKWebViewHostApiCodecReaderWriter alloc] init];
      sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void SetUpBTWKWebViewHostApi(id<FlutterBinaryMessenger> binaryMessenger,
                              NSObject<BTWKWebViewHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:@"dev.flutter.pigeon.webview_flutter_wkwebview.WKWebViewHostApi.create"
         binaryMessenger:binaryMessenger
                   codec:BTWKWebViewHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(createWithIdentifier:
                        configurationIdentifier:error:)],
                @"BTWKWebViewHostApi api (%@) doesn't respond to "
                @"@selector(createWithIdentifier:configurationIdentifier:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          NSInteger arg_configurationIdentifier = [GetNullableObjectAtIndex(args, 1) integerValue];
          FlutterError *error;
          [api createWithIdentifier:arg_identifier
            configurationIdentifier:arg_configurationIdentifier
                              error:&error];
          callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:
                    @"dev.flutter.pigeon.webview_flutter_wkwebview.WKWebViewHostApi.setUIDelegate"
         binaryMessenger:binaryMessenger
                   codec:BTWKWebViewHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setUIDelegateForWebViewWithIdentifier:
                        delegateIdentifier:error:)],
                @"BTWKWebViewHostApi api (%@) doesn't respond to "
                @"@selector(setUIDelegateForWebViewWithIdentifier:delegateIdentifier:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          NSNumber *arg_uiDelegateIdentifier = GetNullableObjectAtIndex(args, 1);
          FlutterError *error;
          [api setUIDelegateForWebViewWithIdentifier:arg_identifier
                                  delegateIdentifier:arg_uiDelegateIdentifier
                                               error:&error];
          callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:@"dev.flutter.pigeon.webview_flutter_wkwebview.WKWebViewHostApi."
                         @"setNavigationDelegate"
         binaryMessenger:binaryMessenger
                   codec:BTWKWebViewHostApiGetCodec()];
    if (api) {
      NSCAssert(
              [api respondsToSelector:@selector(setNavigationDelegateForWebViewWithIdentifier:
                      delegateIdentifier:error:)],
              @"BTWKWebViewHostApi api (%@) doesn't respond to "
              @"@selector(setNavigationDelegateForWebViewWithIdentifier:delegateIdentifier:error:)",
              api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          NSNumber *arg_navigationDelegateIdentifier = GetNullableObjectAtIndex(args, 1);
          FlutterError *error;
          [api setNavigationDelegateForWebViewWithIdentifier:arg_identifier
                                          delegateIdentifier:arg_navigationDelegateIdentifier
                                                       error:&error];
          callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:@"dev.flutter.pigeon.webview_flutter_wkwebview.WKWebViewHostApi.getUrl"
         binaryMessenger:binaryMessenger
                   codec:BTWKWebViewHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(URLForWebViewWithIdentifier:error:)],
                @"BTWKWebViewHostApi api (%@) doesn't respond to "
                @"@selector(URLForWebViewWithIdentifier:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          FlutterError *error;
          NSString *output = [api URLForWebViewWithIdentifier:arg_identifier error:&error];
          callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:
                    @"dev.flutter.pigeon.webview_flutter_wkwebview.WKWebViewHostApi.getEstimatedProgress"
         binaryMessenger:binaryMessenger
                   codec:BTWKWebViewHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(estimatedProgressForWebViewWithIdentifier:
                        error:)],
                @"BTWKWebViewHostApi api (%@) doesn't respond to "
                @"@selector(estimatedProgressForWebViewWithIdentifier:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          FlutterError *error;
          NSNumber *output = [api estimatedProgressForWebViewWithIdentifier:arg_identifier
                                                                      error:&error];
          callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:@"dev.flutter.pigeon.webview_flutter_wkwebview.WKWebViewHostApi.loadRequest"
         binaryMessenger:binaryMessenger
                   codec:BTWKWebViewHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(loadRequestForWebViewWithIdentifier:
                        request:error:)],
                @"BTWKWebViewHostApi api (%@) doesn't respond to "
                @"@selector(loadRequestForWebViewWithIdentifier:request:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          BTNSUrlRequestData *arg_request = GetNullableObjectAtIndex(args, 1);
          FlutterError *error;
          [api loadRequestForWebViewWithIdentifier:arg_identifier request:arg_request error:&error];
          callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:
                    @"dev.flutter.pigeon.webview_flutter_wkwebview.WKWebViewHostApi.loadHtmlString"
         binaryMessenger:binaryMessenger
                   codec:BTWKWebViewHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(loadHTMLForWebViewWithIdentifier:
                        HTMLString:baseURL:error:)],
                @"BTWKWebViewHostApi api (%@) doesn't respond to "
                @"@selector(loadHTMLForWebViewWithIdentifier:HTMLString:baseURL:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          NSString *arg_string = GetNullableObjectAtIndex(args, 1);
          NSString *arg_baseUrl = GetNullableObjectAtIndex(args, 2);
          FlutterError *error;
          [api loadHTMLForWebViewWithIdentifier:arg_identifier
                                     HTMLString:arg_string
                                        baseURL:arg_baseUrl
                                          error:&error];
          callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:@"dev.flutter.pigeon.webview_flutter_wkwebview.WKWebViewHostApi.loadFileUrl"
         binaryMessenger:binaryMessenger
                   codec:BTWKWebViewHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector
                (loadFileForWebViewWithIdentifier:fileURL:readAccessURL:error:)],
                @"BTWKWebViewHostApi api (%@) doesn't respond to "
                @"@selector(loadFileForWebViewWithIdentifier:fileURL:readAccessURL:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          NSString *arg_url = GetNullableObjectAtIndex(args, 1);
          NSString *arg_readAccessUrl = GetNullableObjectAtIndex(args, 2);
          FlutterError *error;
          [api loadFileForWebViewWithIdentifier:arg_identifier
                                        fileURL:arg_url
                                  readAccessURL:arg_readAccessUrl
                                          error:&error];
          callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:
                    @"dev.flutter.pigeon.webview_flutter_wkwebview.WKWebViewHostApi.loadFlutterAsset"
         binaryMessenger:binaryMessenger
                   codec:BTWKWebViewHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(loadAssetForWebViewWithIdentifier:
                        assetKey:error:)],
                @"BTWKWebViewHostApi api (%@) doesn't respond to "
                @"@selector(loadAssetForWebViewWithIdentifier:assetKey:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          NSString *arg_key = GetNullableObjectAtIndex(args, 1);
          FlutterError *error;
          [api loadAssetForWebViewWithIdentifier:arg_identifier assetKey:arg_key error:&error];
          callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:@"dev.flutter.pigeon.webview_flutter_wkwebview.WKWebViewHostApi.canGoBack"
         binaryMessenger:binaryMessenger
                   codec:BTWKWebViewHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(canGoBackForWebViewWithIdentifier:error:)],
                @"BTWKWebViewHostApi api (%@) doesn't respond to "
                @"@selector(canGoBackForWebViewWithIdentifier:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          FlutterError *error;
          NSNumber *output = [api canGoBackForWebViewWithIdentifier:arg_identifier error:&error];
          callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:
                    @"dev.flutter.pigeon.webview_flutter_wkwebview.WKWebViewHostApi.canGoForward"
         binaryMessenger:binaryMessenger
                   codec:BTWKWebViewHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(canGoForwardForWebViewWithIdentifier:error:)],
                @"BTWKWebViewHostApi api (%@) doesn't respond to "
                @"@selector(canGoForwardForWebViewWithIdentifier:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          FlutterError *error;
          NSNumber *output = [api canGoForwardForWebViewWithIdentifier:arg_identifier error:&error];
          callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:@"dev.flutter.pigeon.webview_flutter_wkwebview.WKWebViewHostApi.goBack"
         binaryMessenger:binaryMessenger
                   codec:BTWKWebViewHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(goBackForWebViewWithIdentifier:error:)],
                @"BTWKWebViewHostApi api (%@) doesn't respond to "
                @"@selector(goBackForWebViewWithIdentifier:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          FlutterError *error;
          [api goBackForWebViewWithIdentifier:arg_identifier error:&error];
          callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:@"dev.flutter.pigeon.webview_flutter_wkwebview.WKWebViewHostApi.goForward"
         binaryMessenger:binaryMessenger
                   codec:BTWKWebViewHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(goForwardForWebViewWithIdentifier:error:)],
                @"BTWKWebViewHostApi api (%@) doesn't respond to "
                @"@selector(goForwardForWebViewWithIdentifier:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          FlutterError *error;
          [api goForwardForWebViewWithIdentifier:arg_identifier error:&error];
          callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:@"dev.flutter.pigeon.webview_flutter_wkwebview.WKWebViewHostApi.reload"
         binaryMessenger:binaryMessenger
                   codec:BTWKWebViewHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reloadWebViewWithIdentifier:error:)],
                @"BTWKWebViewHostApi api (%@) doesn't respond to "
                @"@selector(reloadWebViewWithIdentifier:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          FlutterError *error;
          [api reloadWebViewWithIdentifier:arg_identifier error:&error];
          callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:@"dev.flutter.pigeon.webview_flutter_wkwebview.WKWebViewHostApi.getTitle"
         binaryMessenger:binaryMessenger
                   codec:BTWKWebViewHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(titleForWebViewWithIdentifier:error:)],
                @"BTWKWebViewHostApi api (%@) doesn't respond to "
                @"@selector(titleForWebViewWithIdentifier:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          FlutterError *error;
          NSString *output = [api titleForWebViewWithIdentifier:arg_identifier error:&error];
          callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:@"dev.flutter.pigeon.webview_flutter_wkwebview.WKWebViewHostApi."
                         @"setAllowsBackForwardNavigationGestures"
         binaryMessenger:binaryMessenger
                   codec:BTWKWebViewHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector
                (setAllowsBackForwardForWebViewWithIdentifier:isAllowed:error:)],
                @"BTWKWebViewHostApi api (%@) doesn't respond to "
                @"@selector(setAllowsBackForwardForWebViewWithIdentifier:isAllowed:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          BOOL arg_allow = [GetNullableObjectAtIndex(args, 1) boolValue];
          FlutterError *error;
          [api setAllowsBackForwardForWebViewWithIdentifier:arg_identifier
                                                  isAllowed:arg_allow
                                                      error:&error];
          callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:
                    @"dev.flutter.pigeon.webview_flutter_wkwebview.WKWebViewHostApi.setCustomUserAgent"
         binaryMessenger:binaryMessenger
                   codec:BTWKWebViewHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector
                (setCustomUserAgentForWebViewWithIdentifier:userAgent:error:)],
                @"BTWKWebViewHostApi api (%@) doesn't respond to "
                @"@selector(setCustomUserAgentForWebViewWithIdentifier:userAgent:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          NSString *arg_userAgent = GetNullableObjectAtIndex(args, 1);
          FlutterError *error;
          [api setCustomUserAgentForWebViewWithIdentifier:arg_identifier
                                                userAgent:arg_userAgent
                                                    error:&error];
          callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:
                    @"dev.flutter.pigeon.webview_flutter_wkwebview.WKWebViewHostApi.evaluateJavaScript"
         binaryMessenger:binaryMessenger
                   codec:BTWKWebViewHostApiGetCodec()];
    if (api) {
      NSCAssert(
              [api respondsToSelector:@selector
              (evaluateJavaScriptForWebViewWithIdentifier:javaScriptString:completion:)],
              @"BTWKWebViewHostApi api (%@) doesn't respond to "
              @"@selector(evaluateJavaScriptForWebViewWithIdentifier:javaScriptString:completion:)",
              api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          NSString *arg_javaScriptString = GetNullableObjectAtIndex(args, 1);
          [api evaluateJavaScriptForWebViewWithIdentifier:arg_identifier
                                         javaScriptString:arg_javaScriptString
                                               completion:^(id _Nullable output,
                                                            FlutterError *_Nullable error) {
                                                   callback(wrapResult(output, error));
                                               }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:
                    @"dev.flutter.pigeon.webview_flutter_wkwebview.WKWebViewHostApi.setInspectable"
         binaryMessenger:binaryMessenger
                   codec:BTWKWebViewHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setInspectableForWebViewWithIdentifier:
                        inspectable:error:)],
                @"BTWKWebViewHostApi api (%@) doesn't respond to "
                @"@selector(setInspectableForWebViewWithIdentifier:inspectable:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          BOOL arg_inspectable = [GetNullableObjectAtIndex(args, 1) boolValue];
          FlutterError *error;
          [api setInspectableForWebViewWithIdentifier:arg_identifier
                                          inspectable:arg_inspectable
                                                error:&error];
          callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:
                    @"dev.flutter.pigeon.webview_flutter_wkwebview.WKWebViewHostApi.getCustomUserAgent"
         binaryMessenger:binaryMessenger
                   codec:BTWKWebViewHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(customUserAgentForWebViewWithIdentifier:error:)],
                @"BTWKWebViewHostApi api (%@) doesn't respond to "
                @"@selector(customUserAgentForWebViewWithIdentifier:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          FlutterError *error;
          NSString *output = [api customUserAgentForWebViewWithIdentifier:arg_identifier
                                                                    error:&error];
          callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
NSObject<FlutterMessageCodec> *BTWKUIDelegateHostApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

void SetUpBTWKUIDelegateHostApi(id<FlutterBinaryMessenger> binaryMessenger,
                                 NSObject<BTWKUIDelegateHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:@"dev.flutter.pigeon.webview_flutter_wkwebview.WKUIDelegateHostApi.create"
         binaryMessenger:binaryMessenger
                   codec:BTWKUIDelegateHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(createWithIdentifier:error:)],
                @"BTWKUIDelegateHostApi api (%@) doesn't respond to "
                @"@selector(createWithIdentifier:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          FlutterError *error;
          [api createWithIdentifier:arg_identifier error:&error];
          callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface BTWKUIDelegateFlutterApiCodecReader : FlutterStandardReader
@end
@implementation BTWKUIDelegateFlutterApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128:
      return [BTNSUrlRequestData fromList:[self readValue]];
    case 129:
      return [BTWKFrameInfoData fromList:[self readValue]];
    case 130:
      return [BTWKMediaCaptureTypeData fromList:[self readValue]];
    case 131:
      return [BTWKNavigationActionData fromList:[self readValue]];
    case 132:
      return [BTWKPermissionDecisionData fromList:[self readValue]];
    case 133:
      return [BTWKSecurityOriginData fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface BTWKUIDelegateFlutterApiCodecWriter : FlutterStandardWriter
@end
@implementation BTWKUIDelegateFlutterApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[BTNSUrlRequestData class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[BTWKFrameInfoData class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[BTWKMediaCaptureTypeData class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[BTWKNavigationActionData class]]) {
    [self writeByte:131];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[BTWKPermissionDecisionData class]]) {
    [self writeByte:132];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[BTWKSecurityOriginData class]]) {
    [self writeByte:133];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface BTWKUIDelegateFlutterApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation BTWKUIDelegateFlutterApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[BTWKUIDelegateFlutterApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[BTWKUIDelegateFlutterApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *BTWKUIDelegateFlutterApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
      BTWKUIDelegateFlutterApiCodecReaderWriter *readerWriter =
              [[BTWKUIDelegateFlutterApiCodecReaderWriter alloc] init];
      sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

@interface BTWKUIDelegateFlutterApi ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation BTWKUIDelegateFlutterApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)onCreateWebViewForDelegateWithIdentifier:(NSInteger)arg_identifier
                               webViewIdentifier:(NSInteger)arg_webViewIdentifier
                         configurationIdentifier:(NSInteger)arg_configurationIdentifier
                                navigationAction:(BTWKNavigationActionData *)arg_navigationAction
                                      completion:(void (^)(FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
          messageChannelWithName:
                  @"dev.flutter.pigeon.webview_flutter_wkwebview.WKUIDelegateFlutterApi.onCreateWebView"
                 binaryMessenger:self.binaryMessenger
                           codec:BTWKUIDelegateFlutterApiGetCodec()];
  [channel
          sendMessage:@[
                  @(arg_identifier), @(arg_webViewIdentifier), @(arg_configurationIdentifier),
                  arg_navigationAction ?: [NSNull null]
          ]
                reply:^(NSArray<id> *reply) {
                    if (reply != nil) {
                      if (reply.count > 1) {
                        completion([FlutterError errorWithCode:reply[0]
                                                       message:reply[1]
                                                       details:reply[2]]);
                      } else {
                        completion(nil);
                      }
                    } else {
                      completion([FlutterError errorWithCode:@"channel-error"
                                                     message:@"Unable to establish connection on channel."
                                                     details:@""]);
                    }
                }];
}
- (void)requestMediaCapturePermissionForDelegateWithIdentifier:(NSInteger)arg_identifier
                                             webViewIdentifier:(NSInteger)arg_webViewIdentifier
                                                        origin:(BTWKSecurityOriginData *)arg_origin
                                                         frame:(BTWKFrameInfoData *)arg_frame
                                                          type:(BTWKMediaCaptureTypeData *)arg_type
                                                    completion:
                                                            (void (^)(
                                                            BTWKPermissionDecisionData *_Nullable,
                                                            FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
          messageChannelWithName:@"dev.flutter.pigeon.webview_flutter_wkwebview.WKUIDelegateFlutterApi."
                                 @"requestMediaCapturePermission"
                 binaryMessenger:self.binaryMessenger
                           codec:BTWKUIDelegateFlutterApiGetCodec()];
  [channel
          sendMessage:@[
                  @(arg_identifier), @(arg_webViewIdentifier), arg_origin ?: [NSNull null],
                  arg_frame ?: [NSNull null], arg_type ?: [NSNull null]
          ]
                reply:^(NSArray<id> *reply) {
                    if (reply != nil) {
                      if (reply.count > 1) {
                        completion(nil, [FlutterError errorWithCode:reply[0]
                                                            message:reply[1]
                                                            details:reply[2]]);
                      } else {
                        BTWKPermissionDecisionData *output = reply[0] == [NSNull null] ? nil : reply[0];
                        completion(output, nil);
                      }
                    } else {
                      completion(nil,
                                 [FlutterError errorWithCode:@"channel-error"
                                                     message:@"Unable to establish connection on channel."
                                                     details:@""]);
                    }
                }];
}
- (void)runJavaScriptAlertPanelForDelegateWithIdentifier:(NSInteger)arg_identifier
                                                 message:(NSString *)arg_message
                                                   frame:(BTWKFrameInfoData *)arg_frame
                                              completion:
                                                      (void (^)(FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
          messageChannelWithName:@"dev.flutter.pigeon.webview_flutter_wkwebview.WKUIDelegateFlutterApi."
                                 @"runJavaScriptAlertPanel"
                 binaryMessenger:self.binaryMessenger
                           codec:BTWKUIDelegateFlutterApiGetCodec()];
  [channel
          sendMessage:@[ @(arg_identifier), arg_message ?: [NSNull null], arg_frame ?: [NSNull null] ]
                reply:^(NSArray<id> *reply) {
                    if (reply != nil) {
                      if (reply.count > 1) {
                        completion([FlutterError errorWithCode:reply[0]
                                                       message:reply[1]
                                                       details:reply[2]]);
                      } else {
                        completion(nil);
                      }
                    } else {
                      completion([FlutterError errorWithCode:@"channel-error"
                                                     message:@"Unable to establish connection on channel."
                                                     details:@""]);
                    }
                }];
}
- (void)runJavaScriptConfirmPanelForDelegateWithIdentifier:(NSInteger)arg_identifier
                                                   message:(NSString *)arg_message
                                                     frame:(BTWKFrameInfoData *)arg_frame
                                                completion:
                                                        (void (^)(NSNumber *_Nullable,
FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
          messageChannelWithName:@"dev.flutter.pigeon.webview_flutter_wkwebview.WKUIDelegateFlutterApi."
                                 @"runJavaScriptConfirmPanel"
                 binaryMessenger:self.binaryMessenger
                           codec:BTWKUIDelegateFlutterApiGetCodec()];
  [channel
          sendMessage:@[ @(arg_identifier), arg_message ?: [NSNull null], arg_frame ?: [NSNull null] ]
                reply:^(NSArray<id> *reply) {
                    if (reply != nil) {
                      if (reply.count > 1) {
                        completion(nil, [FlutterError errorWithCode:reply[0]
                                                            message:reply[1]
                                                            details:reply[2]]);
                      } else {
                        NSNumber *output = reply[0] == [NSNull null] ? nil : reply[0];
                        completion(output, nil);
                      }
                    } else {
                      completion(nil,
                                 [FlutterError errorWithCode:@"channel-error"
                                                     message:@"Unable to establish connection on channel."
                                                     details:@""]);
                    }
                }];
}
- (void)runJavaScriptTextInputPanelForDelegateWithIdentifier:(NSInteger)arg_identifier
                                                      prompt:(NSString *)arg_prompt
                                                 defaultText:(NSString *)arg_defaultText
                                                       frame:(BTWKFrameInfoData *)arg_frame
                                                  completion:(void (^)(NSString *_Nullable,
FlutterError *_Nullable))
completion {
  FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
          messageChannelWithName:@"dev.flutter.pigeon.webview_flutter_wkwebview.WKUIDelegateFlutterApi."
                                 @"runJavaScriptTextInputPanel"
                 binaryMessenger:self.binaryMessenger
                           codec:BTWKUIDelegateFlutterApiGetCodec()];
  [channel sendMessage:@[
                  @(arg_identifier), arg_prompt ?: [NSNull null], arg_defaultText ?: [NSNull null],
                  arg_frame ?: [NSNull null]
          ]
                 reply:^(NSArray<id> *reply) {
                     if (reply != nil) {
                       if (reply.count > 1) {
                         completion(nil, [FlutterError errorWithCode:reply[0]
                                                             message:reply[1]
                                                             details:reply[2]]);
                       } else {
                         NSString *output = reply[0] == [NSNull null] ? nil : reply[0];
                         completion(output, nil);
                       }
                     } else {
                       completion(nil, [FlutterError
                               errorWithCode:@"channel-error"
                                     message:@"Unable to establish connection on channel."
                                     details:@""]);
                     }
                 }];
}
@end

@interface BTWKHttpCookieStoreHostApiCodecReader : FlutterStandardReader
@end
@implementation BTWKHttpCookieStoreHostApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128:
      return [BTNSHttpCookieData fromList:[self readValue]];
    case 129:
      return [BTNSHttpCookiePropertyKeyEnumData fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface BTWKHttpCookieStoreHostApiCodecWriter : FlutterStandardWriter
@end
@implementation BTWKHttpCookieStoreHostApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[BTNSHttpCookieData class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[BTNSHttpCookiePropertyKeyEnumData class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface BTWKHttpCookieStoreHostApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation BTWKHttpCookieStoreHostApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[BTWKHttpCookieStoreHostApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[BTWKHttpCookieStoreHostApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *BTWKHttpCookieStoreHostApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
      BTWKHttpCookieStoreHostApiCodecReaderWriter *readerWriter =
              [[BTWKHttpCookieStoreHostApiCodecReaderWriter alloc] init];
      sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void SetUpBTWKHttpCookieStoreHostApi(id<FlutterBinaryMessenger> binaryMessenger,
                                      NSObject<BTWKHttpCookieStoreHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:@"dev.flutter.pigeon.webview_flutter_wkwebview.WKHttpCookieStoreHostApi."
                         @"createFromWebsiteDataStore"
         binaryMessenger:binaryMessenger
                   codec:BTWKHttpCookieStoreHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(createFromWebsiteDataStoreWithIdentifier:
                        dataStoreIdentifier:error:)],
                @"BTWKHttpCookieStoreHostApi api (%@) doesn't respond to "
                @"@selector(createFromWebsiteDataStoreWithIdentifier:dataStoreIdentifier:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          NSInteger arg_websiteDataStoreIdentifier = [GetNullableObjectAtIndex(args, 1) integerValue];
          FlutterError *error;
          [api createFromWebsiteDataStoreWithIdentifier:arg_identifier
                                    dataStoreIdentifier:arg_websiteDataStoreIdentifier
                                                  error:&error];
          callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:
                    @"dev.flutter.pigeon.webview_flutter_wkwebview.WKHttpCookieStoreHostApi.setCookie"
         binaryMessenger:binaryMessenger
                   codec:BTWKHttpCookieStoreHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setCookieForStoreWithIdentifier:
                        cookie:completion:)],
                @"BTWKHttpCookieStoreHostApi api (%@) doesn't respond to "
                @"@selector(setCookieForStoreWithIdentifier:cookie:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          BTNSHttpCookieData *arg_cookie = GetNullableObjectAtIndex(args, 1);
          [api setCookieForStoreWithIdentifier:arg_identifier
                                        cookie:arg_cookie
                                    completion:^(FlutterError *_Nullable error) {
                                        callback(wrapResult(nil, error));
                                    }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
NSObject<FlutterMessageCodec> *BTNSUrlHostApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

void SetUpBTNSUrlHostApi(id<FlutterBinaryMessenger> binaryMessenger,
                          NSObject<BTNSUrlHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:
                    @"dev.flutter.pigeon.webview_flutter_wkwebview.NSUrlHostApi.getAbsoluteString"
         binaryMessenger:binaryMessenger
                   codec:BTNSUrlHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(absoluteStringForNSURLWithIdentifier:error:)],
                @"BTNSUrlHostApi api (%@) doesn't respond to "
                @"@selector(absoluteStringForNSURLWithIdentifier:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          FlutterError *error;
          NSString *output = [api absoluteStringForNSURLWithIdentifier:arg_identifier error:&error];
          callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
NSObject<FlutterMessageCodec> *BTNSUrlFlutterApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

@interface BTNSUrlFlutterApi ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation BTNSUrlFlutterApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)createWithIdentifier:(NSInteger)arg_identifier
                  completion:(void (^)(FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
          messageChannelWithName:@"dev.flutter.pigeon.webview_flutter_wkwebview.NSUrlFlutterApi.create"
                 binaryMessenger:self.binaryMessenger
                           codec:BTNSUrlFlutterApiGetCodec()];
  [channel
          sendMessage:@[ @(arg_identifier) ]
                reply:^(NSArray<id> *reply) {
                    if (reply != nil) {
                      if (reply.count > 1) {
                        completion([FlutterError errorWithCode:reply[0]
                                                       message:reply[1]
                                                       details:reply[2]]);
                      } else {
                        completion(nil);
                      }
                    } else {
                      completion([FlutterError errorWithCode:@"channel-error"
                                                     message:@"Unable to establish connection on channel."
                                                     details:@""]);
                    }
                }];
}
@end

NSObject<FlutterMessageCodec> *BTUIScrollViewDelegateHostApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

void SetUpBTUIScrollViewDelegateHostApi(id<FlutterBinaryMessenger> binaryMessenger,
                                         NSObject<BTUIScrollViewDelegateHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:
                    @"dev.flutter.pigeon.webview_flutter_wkwebview.UIScrollViewDelegateHostApi.create"
         binaryMessenger:binaryMessenger
                   codec:BTUIScrollViewDelegateHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(createWithIdentifier:error:)],
                @"BTUIScrollViewDelegateHostApi api (%@) doesn't respond to "
                @"@selector(createWithIdentifier:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          FlutterError *error;
          [api createWithIdentifier:arg_identifier error:&error];
          callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
NSObject<FlutterMessageCodec> *BTUIScrollViewDelegateFlutterApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

@interface BTUIScrollViewDelegateFlutterApi ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation BTUIScrollViewDelegateFlutterApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)scrollViewDidScrollWithIdentifier:(NSInteger)arg_identifier
                   UIScrollViewIdentifier:(NSInteger)arg_uiScrollViewIdentifier
                                        x:(double)arg_x
                                        y:(double)arg_y
                               completion:(void (^)(FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
          messageChannelWithName:@"dev.flutter.pigeon.webview_flutter_wkwebview."
                                 @"UIScrollViewDelegateFlutterApi.scrollViewDidScroll"
                 binaryMessenger:self.binaryMessenger
                           codec:BTUIScrollViewDelegateFlutterApiGetCodec()];
  [channel
          sendMessage:@[ @(arg_identifier), @(arg_uiScrollViewIdentifier), @(arg_x), @(arg_y) ]
                reply:^(NSArray<id> *reply) {
                    if (reply != nil) {
                      if (reply.count > 1) {
                        completion([FlutterError errorWithCode:reply[0]
                                                       message:reply[1]
                                                       details:reply[2]]);
                      } else {
                        completion(nil);
                      }
                    } else {
                      completion([FlutterError errorWithCode:@"channel-error"
                                                     message:@"Unable to establish connection on channel."
                                                     details:@""]);
                    }
                }];
}
@end

NSObject<FlutterMessageCodec> *BTNSUrlCredentialHostApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

void SetUpBTNSUrlCredentialHostApi(id<FlutterBinaryMessenger> binaryMessenger,
                                    NSObject<BTNSUrlCredentialHostApi> *api) {
  /// Create a new native instance and add it to the `InstanceManager`.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
            initWithName:
                    @"dev.flutter.pigeon.webview_flutter_wkwebview.NSUrlCredentialHostApi.createWithUser"
         binaryMessenger:binaryMessenger
                   codec:BTNSUrlCredentialHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector
                (createWithUserWithIdentifier:user:password:persistence:error:)],
                @"BTNSUrlCredentialHostApi api (%@) doesn't respond to "
                @"@selector(createWithUserWithIdentifier:user:password:persistence:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
          NSArray *args = message;
          NSInteger arg_identifier = [GetNullableObjectAtIndex(args, 0) integerValue];
          NSString *arg_user = GetNullableObjectAtIndex(args, 1);
          NSString *arg_password = GetNullableObjectAtIndex(args, 2);
          BTNSUrlCredentialPersistence arg_persistence =
                  [GetNullableObjectAtIndex(args, 3) integerValue];
          FlutterError *error;
          [api createWithUserWithIdentifier:arg_identifier
                                       user:arg_user
                                   password:arg_password
                                persistence:arg_persistence
                                      error:&error];
          callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
NSObject<FlutterMessageCodec> *BTNSUrlProtectionSpaceFlutterApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

@interface BTNSUrlProtectionSpaceFlutterApi ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation BTNSUrlProtectionSpaceFlutterApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)createWithIdentifier:(NSInteger)arg_identifier
                        host:(nullable NSString *)arg_host
        realm:(nullable NSString *)arg_realm
        authenticationMethod:(nullable NSString *)arg_authenticationMethod
        completion:(void (^)(FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
          messageChannelWithName:
                  @"dev.flutter.pigeon.webview_flutter_wkwebview.NSUrlProtectionSpaceFlutterApi.create"
                 binaryMessenger:self.binaryMessenger
                           codec:BTNSUrlProtectionSpaceFlutterApiGetCodec()];
  [channel
          sendMessage:@[
                  @(arg_identifier), arg_host ?: [NSNull null], arg_realm ?: [NSNull null],
                  arg_authenticationMethod ?: [NSNull null]
          ]
                reply:^(NSArray<id> *reply) {
                    if (reply != nil) {
                      if (reply.count > 1) {
                        completion([FlutterError errorWithCode:reply[0]
                                                       message:reply[1]
                                                       details:reply[2]]);
                      } else {
                        completion(nil);
                      }
                    } else {
                      completion([FlutterError errorWithCode:@"channel-error"
                                                     message:@"Unable to establish connection on channel."
                                                     details:@""]);
                    }
                }];
}
@end

NSObject<FlutterMessageCodec> *BTNSUrlAuthenticationChallengeFlutterApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

@interface BTNSUrlAuthenticationChallengeFlutterApi ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation BTNSUrlAuthenticationChallengeFlutterApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)createWithIdentifier:(NSInteger)arg_identifier
   protectionSpaceIdentifier:(NSInteger)arg_protectionSpaceIdentifier
                  completion:(void (^)(FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
          messageChannelWithName:@"dev.flutter.pigeon.webview_flutter_wkwebview."
                                 @"NSUrlAuthenticationChallengeFlutterApi.create"
                 binaryMessenger:self.binaryMessenger
                           codec:BTNSUrlAuthenticationChallengeFlutterApiGetCodec()];
  [channel
          sendMessage:@[ @(arg_identifier), @(arg_protectionSpaceIdentifier) ]
                reply:^(NSArray<id> *reply) {
                    if (reply != nil) {
                      if (reply.count > 1) {
                        completion([FlutterError errorWithCode:reply[0]
                                                       message:reply[1]
                                                       details:reply[2]]);
                      } else {
                        completion(nil);
                      }
                    } else {
                      completion([FlutterError errorWithCode:@"channel-error"
                                                     message:@"Unable to establish connection on channel."
                                                     details:@""]);
                    }
                }];
}
@end

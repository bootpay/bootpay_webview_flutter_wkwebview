// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v13.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import <Foundation/Foundation.h>

@protocol FlutterBinaryMessenger;
@protocol FlutterMessageCodec;
@class FlutterError;
@class FlutterStandardTypedData;

NS_ASSUME_NONNULL_BEGIN

/// Mirror of NSKeyValueObservingOptions.
///
/// See
/// https://developer.apple.com/documentation/foundation/nskeyvalueobservingoptions?language=objc.
typedef NS_ENUM(NSUInteger, BTNSKeyValueObservingOptionsEnum) {
  BTNSKeyValueObservingOptionsEnumNewValue = 0,
  BTNSKeyValueObservingOptionsEnumOldValue = 1,
  BTNSKeyValueObservingOptionsEnumInitialValue = 2,
  BTNSKeyValueObservingOptionsEnumPriorNotification = 3,
};

/// Wrapper for BTNSKeyValueObservingOptionsEnum to allow for nullability.
@interface BTNSKeyValueObservingOptionsEnumBox : NSObject
@property(nonatomic, assign) BTNSKeyValueObservingOptionsEnum value;
- (instancetype)initWithValue:(BTNSKeyValueObservingOptionsEnum)value;
@end

/// Mirror of NSKeyValueChange.
///
/// See https://developer.apple.com/documentation/foundation/nskeyvaluechange?language=objc.
typedef NS_ENUM(NSUInteger, BTNSKeyValueChangeEnum) {
BTNSKeyValueChangeEnumSetting = 0,
        BTNSKeyValueChangeEnumInsertion = 1,
        BTNSKeyValueChangeEnumRemoval = 2,
        BTNSKeyValueChangeEnumReplacement = 3,
};

/// Wrapper for BTNSKeyValueChangeEnum to allow for nullability.
@interface BTNSKeyValueChangeEnumBox : NSObject
@property(nonatomic, assign) BTNSKeyValueChangeEnum value;
- (instancetype)initWithValue:(BTNSKeyValueChangeEnum)value;
@end

/// Mirror of NSKeyValueChangeKey.
///
/// See https://developer.apple.com/documentation/foundation/nskeyvaluechangekey?language=objc.
typedef NS_ENUM(NSUInteger, BTNSKeyValueChangeKeyEnum) {
BTNSKeyValueChangeKeyEnumIndexes = 0,
        BTNSKeyValueChangeKeyEnumKind = 1,
        BTNSKeyValueChangeKeyEnumNewValue = 2,
        BTNSKeyValueChangeKeyEnumNotificationIsPrior = 3,
        BTNSKeyValueChangeKeyEnumOldValue = 4,
        BTNSKeyValueChangeKeyEnumUnknown = 5,
};

/// Wrapper for BTNSKeyValueChangeKeyEnum to allow for nullability.
@interface BTNSKeyValueChangeKeyEnumBox : NSObject
@property(nonatomic, assign) BTNSKeyValueChangeKeyEnum value;
- (instancetype)initWithValue:(BTNSKeyValueChangeKeyEnum)value;
@end

/// Mirror of WKUserScriptInjectionTime.
///
/// See https://developer.apple.com/documentation/webkit/wkuserscriptinjectiontime?language=objc.
typedef NS_ENUM(NSUInteger, BTWKUserScriptInjectionTimeEnum) {
BTWKUserScriptInjectionTimeEnumAtDocumentStart = 0,
        BTWKUserScriptInjectionTimeEnumAtDocumentEnd = 1,
};

/// Wrapper for BTWKUserScriptInjectionTimeEnum to allow for nullability.
@interface BTWKUserScriptInjectionTimeEnumBox : NSObject
@property(nonatomic, assign) BTWKUserScriptInjectionTimeEnum value;
- (instancetype)initWithValue:(BTWKUserScriptInjectionTimeEnum)value;
@end

/// Mirror of WKAudiovisualMediaTypes.
///
/// See
/// [WKAudiovisualMediaTypes](https://developer.apple.com/documentation/webkit/wkaudiovisualmediatypes?language=objc).
typedef NS_ENUM(NSUInteger, BTWKAudiovisualMediaTypeEnum) {
BTWKAudiovisualMediaTypeEnumNone = 0,
        BTWKAudiovisualMediaTypeEnumAudio = 1,
        BTWKAudiovisualMediaTypeEnumVideo = 2,
        BTWKAudiovisualMediaTypeEnumAll = 3,
};

/// Wrapper for BTWKAudiovisualMediaTypeEnum to allow for nullability.
@interface BTWKAudiovisualMediaTypeEnumBox : NSObject
@property(nonatomic, assign) BTWKAudiovisualMediaTypeEnum value;
- (instancetype)initWithValue:(BTWKAudiovisualMediaTypeEnum)value;
@end

/// Mirror of WKWebsiteDataTypes.
///
/// See
/// https://developer.apple.com/documentation/webkit/wkwebsitedatarecord/data_store_record_types?language=objc.
typedef NS_ENUM(NSUInteger, BTWKWebsiteDataTypeEnum) {
BTWKWebsiteDataTypeEnumCookies = 0,
        BTWKWebsiteDataTypeEnumMemoryCache = 1,
        BTWKWebsiteDataTypeEnumDiskCache = 2,
        BTWKWebsiteDataTypeEnumOfflineWebApplicationCache = 3,
        BTWKWebsiteDataTypeEnumLocalStorage = 4,
        BTWKWebsiteDataTypeEnumSessionStorage = 5,
        BTWKWebsiteDataTypeEnumWebSQLDatabases = 6,
        BTWKWebsiteDataTypeEnumIndexedDBDatabases = 7,
};

/// Wrapper for BTWKWebsiteDataTypeEnum to allow for nullability.
@interface BTWKWebsiteDataTypeEnumBox : NSObject
@property(nonatomic, assign) BTWKWebsiteDataTypeEnum value;
- (instancetype)initWithValue:(BTWKWebsiteDataTypeEnum)value;
@end

/// Mirror of WKNavigationActionPolicy.
///
/// See https://developer.apple.com/documentation/webkit/wknavigationactionpolicy?language=objc.
typedef NS_ENUM(NSUInteger, BTWKNavigationActionPolicyEnum) {
BTWKNavigationActionPolicyEnumAllow = 0,
        BTWKNavigationActionPolicyEnumCancel = 1,
};

/// Wrapper for BTWKNavigationActionPolicyEnum to allow for nullability.
@interface BTWKNavigationActionPolicyEnumBox : NSObject
@property(nonatomic, assign) BTWKNavigationActionPolicyEnum value;
- (instancetype)initWithValue:(BTWKNavigationActionPolicyEnum)value;
@end

/// Mirror of WKNavigationResponsePolicy.
///
/// See https://developer.apple.com/documentation/webkit/wknavigationactionpolicy?language=objc.
typedef NS_ENUM(NSUInteger, BTWKNavigationResponsePolicyEnum) {
BTWKNavigationResponsePolicyEnumAllow = 0,
        BTWKNavigationResponsePolicyEnumCancel = 1,
};

/// Wrapper for BTWKNavigationResponsePolicyEnum to allow for nullability.
@interface BTWKNavigationResponsePolicyEnumBox : NSObject
@property(nonatomic, assign) BTWKNavigationResponsePolicyEnum value;
- (instancetype)initWithValue:(BTWKNavigationResponsePolicyEnum)value;
@end

/// Mirror of NSHTTPCookiePropertyKey.
///
/// See https://developer.apple.com/documentation/foundation/nshttpcookiepropertykey.
typedef NS_ENUM(NSUInteger, BTNSHttpCookiePropertyKeyEnum) {
BTNSHttpCookiePropertyKeyEnumComment = 0,
        BTNSHttpCookiePropertyKeyEnumCommentUrl = 1,
        BTNSHttpCookiePropertyKeyEnumDiscard = 2,
        BTNSHttpCookiePropertyKeyEnumDomain = 3,
        BTNSHttpCookiePropertyKeyEnumExpires = 4,
        BTNSHttpCookiePropertyKeyEnumMaximumAge = 5,
        BTNSHttpCookiePropertyKeyEnumName = 6,
        BTNSHttpCookiePropertyKeyEnumOriginUrl = 7,
        BTNSHttpCookiePropertyKeyEnumPath = 8,
        BTNSHttpCookiePropertyKeyEnumPort = 9,
        BTNSHttpCookiePropertyKeyEnumSameSitePolicy = 10,
        BTNSHttpCookiePropertyKeyEnumSecure = 11,
        BTNSHttpCookiePropertyKeyEnumValue = 12,
        BTNSHttpCookiePropertyKeyEnumVersion = 13,
};

/// Wrapper for BTNSHttpCookiePropertyKeyEnum to allow for nullability.
@interface BTNSHttpCookiePropertyKeyEnumBox : NSObject
@property(nonatomic, assign) BTNSHttpCookiePropertyKeyEnum value;
- (instancetype)initWithValue:(BTNSHttpCookiePropertyKeyEnum)value;
@end

/// An object that contains information about an action that causes navigation
/// to occur.
///
/// Wraps
/// [WKNavigationType](https://developer.apple.com/documentation/webkit/wknavigationaction?language=objc).
typedef NS_ENUM(NSUInteger, BTWKNavigationType) {
/// A link activation.
///
/// See
/// https://developer.apple.com/documentation/webkit/wknavigationtype/wknavigationtypelinkactivated?language=objc.
BTWKNavigationTypeLinkActivated = 0,
/// A request to submit a form.
///
/// See
/// https://developer.apple.com/documentation/webkit/wknavigationtype/wknavigationtypeformsubmitted?language=objc.
BTWKNavigationTypeSubmitted = 1,
/// A request for the frameâ€™s next or previous item.
///
/// See
/// https://developer.apple.com/documentation/webkit/wknavigationtype/wknavigationtypebackforward?language=objc.
BTWKNavigationTypeBackForward = 2,
/// A request to reload the webpage.
///
/// See
/// https://developer.apple.com/documentation/webkit/wknavigationtype/wknavigationtypereload?language=objc.
BTWKNavigationTypeReload = 3,
/// A request to resubmit a form.
///
/// See
/// https://developer.apple.com/documentation/webkit/wknavigationtype/wknavigationtypeformresubmitted?language=objc.
BTWKNavigationTypeFormResubmitted = 4,
/// A navigation request that originates for some other reason.
///
/// See
/// https://developer.apple.com/documentation/webkit/wknavigationtype/wknavigationtypeother?language=objc.
BTWKNavigationTypeOther = 5,
/// An unknown navigation type.
///
/// This does not represent an actual value provided by the platform and only
/// indicates a value was provided that isn't currently supported.
BTWKNavigationTypeUnknown = 6,
};

/// Wrapper for BTWKNavigationType to allow for nullability.
@interface BTWKNavigationTypeBox : NSObject
@property(nonatomic, assign) BTWKNavigationType value;
- (instancetype)initWithValue:(BTWKNavigationType)value;
@end

/// Possible permission decisions for device resource access.
///
/// See https://developer.apple.com/documentation/webkit/wkpermissiondecision?language=objc.
typedef NS_ENUM(NSUInteger, BTWKPermissionDecision) {
/// Deny permission for the requested resource.
///
/// See
/// https://developer.apple.com/documentation/webkit/wkpermissiondecision/wkpermissiondecisiondeny?language=objc.
BTWKPermissionDecisionDeny = 0,
/// Deny permission for the requested resource.
///
/// See
/// https://developer.apple.com/documentation/webkit/wkpermissiondecision/wkpermissiondecisiongrant?language=objc.
BTWKPermissionDecisionGrant = 1,
/// Prompt the user for permission for the requested resource.
///
/// See
/// https://developer.apple.com/documentation/webkit/wkpermissiondecision/wkpermissiondecisionprompt?language=objc.
BTWKPermissionDecisionPrompt = 2,
};

/// Wrapper for BTWKPermissionDecision to allow for nullability.
@interface BTWKPermissionDecisionBox : NSObject
@property(nonatomic, assign) BTWKPermissionDecision value;
- (instancetype)initWithValue:(BTWKPermissionDecision)value;
@end

/// List of the types of media devices that can capture audio, video, or both.
///
/// See https://developer.apple.com/documentation/webkit/wkmediacapturetype?language=objc.
typedef NS_ENUM(NSUInteger, BTWKMediaCaptureType) {
/// A media device that can capture video.
///
/// See
/// https://developer.apple.com/documentation/webkit/wkmediacapturetype/wkmediacapturetypecamera?language=objc.
BTWKMediaCaptureTypeCamera = 0,
/// A media device or devices that can capture audio and video.
///
/// See
/// https://developer.apple.com/documentation/webkit/wkmediacapturetype/wkmediacapturetypecameraandmicrophone?language=objc.
BTWKMediaCaptureTypeCameraAndMicrophone = 1,
/// A media device that can capture audio.
///
/// See
/// https://developer.apple.com/documentation/webkit/wkmediacapturetype/wkmediacapturetypemicrophone?language=objc.
BTWKMediaCaptureTypeMicrophone = 2,
/// An unknown media device.
///
/// This does not represent an actual value provided by the platform and only
/// indicates a value was provided that isn't currently supported.
BTWKMediaCaptureTypeUnknown = 3,
};

/// Wrapper for BTWKMediaCaptureType to allow for nullability.
@interface BTWKMediaCaptureTypeBox : NSObject
@property(nonatomic, assign) BTWKMediaCaptureType value;
- (instancetype)initWithValue:(BTWKMediaCaptureType)value;
@end

/// Responses to an authentication challenge.
///
/// See
/// https://developer.apple.com/documentation/foundation/nsurlsessionauthchallengedisposition?language=objc.
typedef NS_ENUM(NSUInteger, BTNSUrlSessionAuthChallengeDisposition) {
/// Use the specified credential, which may be nil.
///
/// See
/// https://developer.apple.com/documentation/foundation/nsurlsessionauthchallengedisposition/nsurlsessionauthchallengeusecredential?language=objc.
BTNSUrlSessionAuthChallengeDispositionUseCredential = 0,
/// Use the default handling for the challenge as though this delegate method
/// were not implemented.
///
/// See
/// https://developer.apple.com/documentation/foundation/nsurlsessionauthchallengedisposition/nsurlsessionauthchallengeperformdefaulthandling?language=objc.
BTNSUrlSessionAuthChallengeDispositionPerformDefaultHandling = 1,
/// Cancel the entire request.
///
/// See
/// https://developer.apple.com/documentation/foundation/nsurlsessionauthchallengedisposition/nsurlsessionauthchallengecancelauthenticationchallenge?language=objc.
BTNSUrlSessionAuthChallengeDispositionCancelAuthenticationChallenge = 2,
/// Reject this challenge, and call the authentication delegate method again
/// with the next authentication protection space.
///
/// See
/// https://developer.apple.com/documentation/foundation/nsurlsessionauthchallengedisposition/nsurlsessionauthchallengerejectprotectionspace?language=objc.
BTNSUrlSessionAuthChallengeDispositionRejectProtectionSpace = 3,
};

/// Wrapper for BTNSUrlSessionAuthChallengeDisposition to allow for nullability.
@interface BTNSUrlSessionAuthChallengeDispositionBox : NSObject
@property(nonatomic, assign) BTNSUrlSessionAuthChallengeDisposition value;
- (instancetype)initWithValue:(BTNSUrlSessionAuthChallengeDisposition)value;
@end

/// Specifies how long a credential will be kept.
typedef NS_ENUM(NSUInteger, BTNSUrlCredentialPersistence) {
/// The credential should not be stored.
///
/// See
/// https://developer.apple.com/documentation/foundation/nsurlcredentialpersistence/nsurlcredentialpersistencenone?language=objc.
BTNSUrlCredentialPersistenceNone = 0,
/// The credential should be stored only for this session.
///
/// See
/// https://developer.apple.com/documentation/foundation/nsurlcredentialpersistence/nsurlcredentialpersistenceforsession?language=objc.
BTNSUrlCredentialPersistenceSession = 1,
/// The credential should be stored in the keychain.
///
/// See
/// https://developer.apple.com/documentation/foundation/nsurlcredentialpersistence/nsurlcredentialpersistencepermanent?language=objc.
BTNSUrlCredentialPersistencePermanent = 2,
/// The credential should be stored permanently in the keychain, and in
/// addition should be distributed to other devices based on the owning Apple
/// ID.
///
/// See
/// https://developer.apple.com/documentation/foundation/nsurlcredentialpersistence/nsurlcredentialpersistencesynchronizable?language=objc.
BTNSUrlCredentialPersistenceSynchronizable = 3,
};

/// Wrapper for BTNSUrlCredentialPersistence to allow for nullability.
@interface BTNSUrlCredentialPersistenceBox : NSObject
@property(nonatomic, assign) BTNSUrlCredentialPersistence value;
- (instancetype)initWithValue:(BTNSUrlCredentialPersistence)value;
@end

@class BTNSKeyValueObservingOptionsEnumData;
@class BTNSKeyValueChangeKeyEnumData;
@class BTWKUserScriptInjectionTimeEnumData;
@class BTWKAudiovisualMediaTypeEnumData;
@class BTWKWebsiteDataTypeEnumData;
@class BTWKNavigationActionPolicyEnumData;
@class BTNSHttpCookiePropertyKeyEnumData;
@class BTWKPermissionDecisionData;
@class BTWKMediaCaptureTypeData;
@class BTNSUrlRequestData;
@class BTNSHttpUrlResponseData;
@class BTWKUserScriptData;
@class BTWKNavigationActionData;
@class BTWKNavigationResponseData;
@class BTWKFrameInfoData;
@class BTNSErrorData;
@class BTWKScriptMessageData;
@class BTWKSecurityOriginData;
@class BTNSHttpCookieData;
@class BTObjectOrIdentifier;
@class BTAuthenticationChallengeResponse;

@interface BTNSKeyValueObservingOptionsEnumData : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithValue:(BTNSKeyValueObservingOptionsEnum)value;
@property(nonatomic, assign) BTNSKeyValueObservingOptionsEnum value;
@end

@interface BTNSKeyValueChangeKeyEnumData : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithValue:(BTNSKeyValueChangeKeyEnum)value;
@property(nonatomic, assign) BTNSKeyValueChangeKeyEnum value;
@end

@interface BTWKUserScriptInjectionTimeEnumData : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithValue:(BTWKUserScriptInjectionTimeEnum)value;
@property(nonatomic, assign) BTWKUserScriptInjectionTimeEnum value;
@end

@interface BTWKAudiovisualMediaTypeEnumData : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithValue:(BTWKAudiovisualMediaTypeEnum)value;
@property(nonatomic, assign) BTWKAudiovisualMediaTypeEnum value;
@end

@interface BTWKWebsiteDataTypeEnumData : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithValue:(BTWKWebsiteDataTypeEnum)value;
@property(nonatomic, assign) BTWKWebsiteDataTypeEnum value;
@end

@interface BTWKNavigationActionPolicyEnumData : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithValue:(BTWKNavigationActionPolicyEnum)value;
@property(nonatomic, assign) BTWKNavigationActionPolicyEnum value;
@end

@interface BTNSHttpCookiePropertyKeyEnumData : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithValue:(BTNSHttpCookiePropertyKeyEnum)value;
@property(nonatomic, assign) BTNSHttpCookiePropertyKeyEnum value;
@end

@interface BTWKPermissionDecisionData : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithValue:(BTWKPermissionDecision)value;
@property(nonatomic, assign) BTWKPermissionDecision value;
@end

@interface BTWKMediaCaptureTypeData : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithValue:(BTWKMediaCaptureType)value;
@property(nonatomic, assign) BTWKMediaCaptureType value;
@end

/// Mirror of NSURLRequest.
///
/// See https://developer.apple.com/documentation/foundation/nsurlrequest?language=objc.
@interface BTNSUrlRequestData : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithUrl:(NSString *)url
                 httpMethod:(nullable NSString *)httpMethod
        httpBody:(nullable FlutterStandardTypedData *)httpBody
        allHttpHeaderFields:(NSDictionary<NSString *, NSString *> *)allHttpHeaderFields;
@property(nonatomic, copy) NSString *url;
@property(nonatomic, copy, nullable) NSString *httpMethod;
@property(nonatomic, strong, nullable) FlutterStandardTypedData *httpBody;
@property(nonatomic, copy) NSDictionary<NSString *, NSString *> *allHttpHeaderFields;
@end

/// Mirror of NSURLResponse.
///
/// See https://developer.apple.com/documentation/foundation/nshttpurlresponse?language=objc.
@interface BTNSHttpUrlResponseData : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithStatusCode:(NSInteger)statusCode;
@property(nonatomic, assign) NSInteger statusCode;
@end

/// Mirror of WKUserScript.
///
/// See https://developer.apple.com/documentation/webkit/wkuserscript?language=objc.
@interface BTWKUserScriptData : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithSource:(NSString *)source
                 injectionTime:(nullable BTWKUserScriptInjectionTimeEnumData *)injectionTime
        isMainFrameOnly:(BOOL)isMainFrameOnly;
@property(nonatomic, copy) NSString *source;
@property(nonatomic, strong, nullable) BTWKUserScriptInjectionTimeEnumData *injectionTime;
@property(nonatomic, assign) BOOL isMainFrameOnly;
@end

/// Mirror of WKNavigationAction.
///
/// See https://developer.apple.com/documentation/webkit/wknavigationaction.
@interface BTWKNavigationActionData : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithRequest:(BTNSUrlRequestData *)request
                    targetFrame:(BTWKFrameInfoData *)targetFrame
                 navigationType:(BTWKNavigationType)navigationType;
@property(nonatomic, strong) BTNSUrlRequestData *request;
@property(nonatomic, strong) BTWKFrameInfoData *targetFrame;
@property(nonatomic, assign) BTWKNavigationType navigationType;
@end

/// Mirror of WKNavigationResponse.
///
/// See https://developer.apple.com/documentation/webkit/wknavigationresponse.
@interface BTWKNavigationResponseData : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithResponse:(BTNSHttpUrlResponseData *)response
                    forMainFrame:(BOOL)forMainFrame;
@property(nonatomic, strong) BTNSHttpUrlResponseData *response;
@property(nonatomic, assign) BOOL forMainFrame;
@end

/// Mirror of WKFrameInfo.
///
/// See https://developer.apple.com/documentation/webkit/wkframeinfo?language=objc.
@interface BTWKFrameInfoData : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithIsMainFrame:(BOOL)isMainFrame request:(BTNSUrlRequestData *)request;
@property(nonatomic, assign) BOOL isMainFrame;
@property(nonatomic, strong) BTNSUrlRequestData *request;
@end

/// Mirror of NSError.
///
/// See https://developer.apple.com/documentation/foundation/nserror?language=objc.
@interface BTNSErrorData : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithCode:(NSInteger)code
                      domain:(NSString *)domain
                    userInfo:(nullable NSDictionary<NSString *, id> *)userInfo;
@property(nonatomic, assign) NSInteger code;
@property(nonatomic, copy) NSString *domain;
@property(nonatomic, copy, nullable) NSDictionary<NSString *, id> *userInfo;
@end

/// Mirror of WKScriptMessage.
///
/// See https://developer.apple.com/documentation/webkit/wkscriptmessage?language=objc.
@interface BTWKScriptMessageData : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithName:(NSString *)name body:(nullable id)body;
@property(nonatomic, copy) NSString *name;
@property(nonatomic, strong, nullable) id body;
@end

/// Mirror of WKSecurityOrigin.
///
/// See https://developer.apple.com/documentation/webkit/wksecurityorigin?language=objc.
@interface BTWKSecurityOriginData : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithHost:(NSString *)host port:(NSInteger)port protocol:(NSString *)protocol;
@property(nonatomic, copy) NSString *host;
@property(nonatomic, assign) NSInteger port;
@property(nonatomic, copy) NSString *protocol;
@end

/// Mirror of NSHttpCookieData.
///
/// See https://developer.apple.com/documentation/foundation/nshttpcookie?language=objc.
@interface BTNSHttpCookieData : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithPropertyKeys:(NSArray<BTNSHttpCookiePropertyKeyEnumData *> *)propertyKeys
        propertyValues:(NSArray<id> *)propertyValues;
@property(nonatomic, copy) NSArray<BTNSHttpCookiePropertyKeyEnumData *> *propertyKeys;
@property(nonatomic, copy) NSArray<id> *propertyValues;
@end

/// An object that can represent either a value supported by
/// `StandardMessageCodec`, a data class in this pigeon file, or an identifier
/// of an object stored in an `InstanceManager`.
@interface BTObjectOrIdentifier : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithValue:(nullable id)value isIdentifier:(BOOL)isIdentifier;
@property(nonatomic, strong, nullable) id value;
/// Whether value is an int that is used to retrieve an instance stored in an
/// `InstanceManager`.
@property(nonatomic, assign) BOOL isIdentifier;
@end

@interface BTAuthenticationChallengeResponse : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithDisposition:(BTNSUrlSessionAuthChallengeDisposition)disposition
               credentialIdentifier:(nullable NSNumber *)credentialIdentifier;
@property(nonatomic, assign) BTNSUrlSessionAuthChallengeDisposition disposition;
@property(nonatomic, strong, nullable) NSNumber *credentialIdentifier;
@end

/// The codec used by BTWKWebsiteDataStoreHostApi.
NSObject<FlutterMessageCodec> *BTWKWebsiteDataStoreHostApiGetCodec(void);

/// Mirror of WKWebsiteDataStore.
///
/// See https://developer.apple.com/documentation/webkit/wkwebsitedatastore?language=objc.
@protocol BTWKWebsiteDataStoreHostApi
- (void)createFromWebViewConfigurationWithIdentifier:(NSInteger)identifier
                             configurationIdentifier:(NSInteger)configurationIdentifier
                                               error:(FlutterError *_Nullable *_Nonnull)error;
- (void)createDefaultDataStoreWithIdentifier:(NSInteger)identifier
                                       error:(FlutterError *_Nullable *_Nonnull)error;
- (void)removeDataFromDataStoreWithIdentifier:(NSInteger)identifier
                                      ofTypes:(NSArray<BTWKWebsiteDataTypeEnumData *> *)dataTypes
        modifiedSince:(double)modificationTimeInSecondsSinceEpoch
        completion:(void (^)(NSNumber *_Nullable,
        FlutterError *_Nullable))completion;
@end

extern void SetUpBTWKWebsiteDataStoreHostApi(
        id<FlutterBinaryMessenger> binaryMessenger,
        NSObject<BTWKWebsiteDataStoreHostApi> *_Nullable api);

/// The codec used by BTUIViewHostApi.
NSObject<FlutterMessageCodec> *BTUIViewHostApiGetCodec(void);

/// Mirror of UIView.
///
/// See https://developer.apple.com/documentation/uikit/uiview?language=objc.
@protocol BTUIViewHostApi
- (void)setBackgroundColorForViewWithIdentifier:(NSInteger)identifier
                                        toValue:(nullable NSNumber *)value
        error:(FlutterError *_Nullable *_Nonnull)error;
- (void)setOpaqueForViewWithIdentifier:(NSInteger)identifier
                              isOpaque:(BOOL)opaque
                                 error:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void SetUpBTUIViewHostApi(id<FlutterBinaryMessenger> binaryMessenger,
                                  NSObject<BTUIViewHostApi> *_Nullable api);

/// The codec used by BTUIScrollViewHostApi.
NSObject<FlutterMessageCodec> *BTUIScrollViewHostApiGetCodec(void);

/// Mirror of UIScrollView.
///
/// See https://developer.apple.com/documentation/uikit/uiscrollview?language=objc.
@protocol BTUIScrollViewHostApi
- (void)createFromWebViewWithIdentifier:(NSInteger)identifier
                      webViewIdentifier:(NSInteger)webViewIdentifier
                                  error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable NSArray<NSNumber *> *)
contentOffsetForScrollViewWithIdentifier:(NSInteger)identifier
        error:(FlutterError *_Nullable *_Nonnull)error;
- (void)scrollByForScrollViewWithIdentifier:(NSInteger)identifier
                                          x:(double)x
                                          y:(double)y
                                      error:(FlutterError *_Nullable *_Nonnull)error;
- (void)setContentOffsetForScrollViewWithIdentifier:(NSInteger)identifier
                                                toX:(double)x
                                                  y:(double)y
                                              error:(FlutterError *_Nullable *_Nonnull)error;
- (void)setDelegateForScrollViewWithIdentifier:(NSInteger)identifier
                uiScrollViewDelegateIdentifier:(nullable NSNumber *)uiScrollViewDelegateIdentifier
        error:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void SetUpBTUIScrollViewHostApi(id<FlutterBinaryMessenger> binaryMessenger,
                                        NSObject<BTUIScrollViewHostApi> *_Nullable api);

/// The codec used by BTWKWebViewConfigurationHostApi.
NSObject<FlutterMessageCodec> *BTWKWebViewConfigurationHostApiGetCodec(void);

/// Mirror of WKWebViewConfiguration.
///
/// See https://developer.apple.com/documentation/webkit/wkwebviewconfiguration?language=objc.
@protocol BTWKWebViewConfigurationHostApi
- (void)createWithIdentifier:(NSInteger)identifier error:(FlutterError *_Nullable *_Nonnull)error;
- (void)createFromWebViewWithIdentifier:(NSInteger)identifier
                      webViewIdentifier:(NSInteger)webViewIdentifier
                                  error:(FlutterError *_Nullable *_Nonnull)error;
- (void)setAllowsInlineMediaPlaybackForConfigurationWithIdentifier:(NSInteger)identifier
                                                         isAllowed:(BOOL)allow
                                                             error:
                                                                     (FlutterError *_Nullable *_Nonnull)
error;
- (void)setLimitsNavigationsToAppBoundDomainsForConfigurationWithIdentifier:(NSInteger)identifier
                                                                  isLimited:(BOOL)limit
                                                                      error:(FlutterError *_Nullable
*_Nonnull)error;
- (void)
setMediaTypesRequiresUserActionForConfigurationWithIdentifier:(NSInteger)identifier
                                                     forTypes:
                                                             (NSArray<
BTWKAudiovisualMediaTypeEnumData
*> *)types
        error:
(FlutterError *_Nullable *_Nonnull)
error;
@end

extern void SetUpBTWKWebViewConfigurationHostApi(
        id<FlutterBinaryMessenger> binaryMessenger,
        NSObject<BTWKWebViewConfigurationHostApi> *_Nullable api);

/// The codec used by BTWKWebViewConfigurationFlutterApi.
NSObject<FlutterMessageCodec> *BTWKWebViewConfigurationFlutterApiGetCodec(void);

/// Handles callbacks from a WKWebViewConfiguration instance.
///
/// See https://developer.apple.com/documentation/webkit/wkwebviewconfiguration?language=objc.
@interface BTWKWebViewConfigurationFlutterApi : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
- (void)createWithIdentifier:(NSInteger)identifier
                  completion:(void (^)(FlutterError *_Nullable))completion;
@end

/// The codec used by BTWKUserContentControllerHostApi.
NSObject<FlutterMessageCodec> *BTWKUserContentControllerHostApiGetCodec(void);

/// Mirror of WKUserContentController.
///
/// See https://developer.apple.com/documentation/webkit/wkusercontentcontroller?language=objc.
@protocol BTWKUserContentControllerHostApi
- (void)createFromWebViewConfigurationWithIdentifier:(NSInteger)identifier
                             configurationIdentifier:(NSInteger)configurationIdentifier
                                               error:(FlutterError *_Nullable *_Nonnull)error;
- (void)addScriptMessageHandlerForControllerWithIdentifier:(NSInteger)identifier
                                         handlerIdentifier:(NSInteger)handlerIdentifier
                                                    ofName:(NSString *)name
                                                     error:(FlutterError *_Nullable *_Nonnull)error;
- (void)removeScriptMessageHandlerForControllerWithIdentifier:(NSInteger)identifier
                                                         name:(NSString *)name
                                                        error:(FlutterError *_Nullable *_Nonnull)
error;
- (void)removeAllScriptMessageHandlersForControllerWithIdentifier:(NSInteger)identifier
                                                            error:
                                                                    (FlutterError *_Nullable *_Nonnull)
error;
- (void)addUserScriptForControllerWithIdentifier:(NSInteger)identifier
                                      userScript:(BTWKUserScriptData *)userScript
                                           error:(FlutterError *_Nullable *_Nonnull)error;
- (void)removeAllUserScriptsForControllerWithIdentifier:(NSInteger)identifier
                                                  error:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void SetUpBTWKUserContentControllerHostApi(
        id<FlutterBinaryMessenger> binaryMessenger,
        NSObject<BTWKUserContentControllerHostApi> *_Nullable api);

/// The codec used by BTWKPreferencesHostApi.
NSObject<FlutterMessageCodec> *BTWKPreferencesHostApiGetCodec(void);

/// Mirror of WKUserPreferences.
///
/// See https://developer.apple.com/documentation/webkit/wkpreferences?language=objc.
@protocol BTWKPreferencesHostApi
- (void)createFromWebViewConfigurationWithIdentifier:(NSInteger)identifier
                             configurationIdentifier:(NSInteger)configurationIdentifier
                                               error:(FlutterError *_Nullable *_Nonnull)error;
- (void)setJavaScriptEnabledForPreferencesWithIdentifier:(NSInteger)identifier
                                               isEnabled:(BOOL)enabled
                                                   error:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void SetUpBTWKPreferencesHostApi(id<FlutterBinaryMessenger> binaryMessenger,
                                         NSObject<BTWKPreferencesHostApi> *_Nullable api);

/// The codec used by BTWKScriptMessageHandlerHostApi.
NSObject<FlutterMessageCodec> *BTWKScriptMessageHandlerHostApiGetCodec(void);

/// Mirror of WKScriptMessageHandler.
///
/// See https://developer.apple.com/documentation/webkit/wkscriptmessagehandler?language=objc.
@protocol BTWKScriptMessageHandlerHostApi
- (void)createWithIdentifier:(NSInteger)identifier error:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void SetUpBTWKScriptMessageHandlerHostApi(
        id<FlutterBinaryMessenger> binaryMessenger,
        NSObject<BTWKScriptMessageHandlerHostApi> *_Nullable api);

/// The codec used by BTWKScriptMessageHandlerFlutterApi.
NSObject<FlutterMessageCodec> *BTWKScriptMessageHandlerFlutterApiGetCodec(void);

/// Handles callbacks from a WKScriptMessageHandler instance.
///
/// See https://developer.apple.com/documentation/webkit/wkscriptmessagehandler?language=objc.
@interface BTWKScriptMessageHandlerFlutterApi : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
- (void)didReceiveScriptMessageForHandlerWithIdentifier:(NSInteger)identifier
                        userContentControllerIdentifier:(NSInteger)userContentControllerIdentifier
                                                message:(BTWKScriptMessageData *)message
                                             completion:
                                                     (void (^)(FlutterError *_Nullable))completion;
@end

/// The codec used by BTWKNavigationDelegateHostApi.
NSObject<FlutterMessageCodec> *BTWKNavigationDelegateHostApiGetCodec(void);

/// Mirror of WKNavigationDelegate.
///
/// See https://developer.apple.com/documentation/webkit/wknavigationdelegate?language=objc.
@protocol BTWKNavigationDelegateHostApi
- (void)createWithIdentifier:(NSInteger)identifier error:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void SetUpBTWKNavigationDelegateHostApi(
        id<FlutterBinaryMessenger> binaryMessenger,
        NSObject<BTWKNavigationDelegateHostApi> *_Nullable api);

/// The codec used by BTWKNavigationDelegateFlutterApi.
NSObject<FlutterMessageCodec> *BTWKNavigationDelegateFlutterApiGetCodec(void);

/// Handles callbacks from a WKNavigationDelegate instance.
///
/// See https://developer.apple.com/documentation/webkit/wknavigationdelegate?language=objc.
@interface BTWKNavigationDelegateFlutterApi : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
- (void)didFinishNavigationForDelegateWithIdentifier:(NSInteger)identifier
                                   webViewIdentifier:(NSInteger)webViewIdentifier
                                                 URL:(nullable NSString *)url
        completion:(void (^)(FlutterError *_Nullable))completion;
- (void)didStartProvisionalNavigationForDelegateWithIdentifier:(NSInteger)identifier
                                             webViewIdentifier:(NSInteger)webViewIdentifier
                                                           URL:(nullable NSString *)url
        completion:(void (^)(FlutterError *_Nullable))
completion;
- (void)
decidePolicyForNavigationActionForDelegateWithIdentifier:(NSInteger)identifier
                                       webViewIdentifier:(NSInteger)webViewIdentifier
                                        navigationAction:
                                                (BTWKNavigationActionData *)navigationAction
                                              completion:
                                                      (void (^)(BTWKNavigationActionPolicyEnumData
                                                                *_Nullable,
                                                                FlutterError *_Nullable))completion;
- (void)decidePolicyForNavigationResponseForDelegateWithIdentifier:(NSInteger)identifier
                                                 webViewIdentifier:(NSInteger)webViewIdentifier
                                                navigationResponse:(BTWKNavigationResponseData *)
                                                        navigationResponse
                                                        completion:
                                                                (void (^)(
                                                                BTWKNavigationResponsePolicyEnumBox
                                                                *_Nullable,
                                                                FlutterError *_Nullable))completion;
- (void)didFailNavigationForDelegateWithIdentifier:(NSInteger)identifier
                                 webViewIdentifier:(NSInteger)webViewIdentifier
                                             error:(BTNSErrorData *)error
                                        completion:(void (^)(FlutterError *_Nullable))completion;
- (void)didFailProvisionalNavigationForDelegateWithIdentifier:(NSInteger)identifier
                                            webViewIdentifier:(NSInteger)webViewIdentifier
                                                        error:(BTNSErrorData *)error
                                                   completion:(void (^)(FlutterError *_Nullable))
                                                           completion;
- (void)webViewWebContentProcessDidTerminateForDelegateWithIdentifier:(NSInteger)identifier
                                                    webViewIdentifier:(NSInteger)webViewIdentifier
                                                           completion:
                                                                   (void (^)(FlutterError *_Nullable))
                                                                   completion;
- (void)didReceiveAuthenticationChallengeForDelegateWithIdentifier:(NSInteger)identifier
                                                 webViewIdentifier:(NSInteger)webViewIdentifier
                                               challengeIdentifier:(NSInteger)challengeIdentifier
                                                        completion:
                                                                (void (^)(
                                                                BTAuthenticationChallengeResponse
                                                                *_Nullable,
                                                                FlutterError *_Nullable))completion;
@end

/// The codec used by BTNSObjectHostApi.
NSObject<FlutterMessageCodec> *BTNSObjectHostApiGetCodec(void);

/// Mirror of NSObject.
///
/// See https://developer.apple.com/documentation/objectivec/nsobject.
@protocol BTNSObjectHostApi
- (void)disposeObjectWithIdentifier:(NSInteger)identifier
                              error:(FlutterError *_Nullable *_Nonnull)error;
- (void)addObserverForObjectWithIdentifier:(NSInteger)identifier
                        observerIdentifier:(NSInteger)observerIdentifier
                                   keyPath:(NSString *)keyPath
                                   options:
                                           (NSArray<BTNSKeyValueObservingOptionsEnumData *> *)options
        error:(FlutterError *_Nullable *_Nonnull)error;
- (void)removeObserverForObjectWithIdentifier:(NSInteger)identifier
                           observerIdentifier:(NSInteger)observerIdentifier
                                      keyPath:(NSString *)keyPath
                                        error:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void SetUpBTNSObjectHostApi(id<FlutterBinaryMessenger> binaryMessenger,
                                    NSObject<BTNSObjectHostApi> *_Nullable api);

/// The codec used by BTNSObjectFlutterApi.
NSObject<FlutterMessageCodec> *BTNSObjectFlutterApiGetCodec(void);

/// Handles callbacks from an NSObject instance.
///
/// See https://developer.apple.com/documentation/objectivec/nsobject.
@interface BTNSObjectFlutterApi : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
- (void)observeValueForObjectWithIdentifier:(NSInteger)identifier
                                    keyPath:(NSString *)keyPath
                           objectIdentifier:(NSInteger)objectIdentifier
                                 changeKeys:(NSArray<BTNSKeyValueChangeKeyEnumData *> *)changeKeys
        changeValues:(NSArray<BTObjectOrIdentifier *> *)changeValues
        completion:(void (^)(FlutterError *_Nullable))completion;
- (void)disposeObjectWithIdentifier:(NSInteger)identifier
                         completion:(void (^)(FlutterError *_Nullable))completion;
@end

/// The codec used by BTWKWebViewHostApi.
NSObject<FlutterMessageCodec> *BTWKWebViewHostApiGetCodec(void);

/// Mirror of WKWebView.
///
/// See https://developer.apple.com/documentation/webkit/wkwebview?language=objc.
@protocol BTWKWebViewHostApi
- (void)createWithIdentifier:(NSInteger)identifier
     configurationIdentifier:(NSInteger)configurationIdentifier
                       error:(FlutterError *_Nullable *_Nonnull)error;
- (void)setUIDelegateForWebViewWithIdentifier:(NSInteger)identifier
                           delegateIdentifier:(nullable NSNumber *)uiDelegateIdentifier
        error:(FlutterError *_Nullable *_Nonnull)error;
- (void)setNavigationDelegateForWebViewWithIdentifier:(NSInteger)identifier
                                   delegateIdentifier:
                                           (nullable NSNumber *)navigationDelegateIdentifier
        error:(FlutterError *_Nullable *_Nonnull)error;
- (nullable NSString *)URLForWebViewWithIdentifier:(NSInteger)identifier
        error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable NSNumber *)estimatedProgressForWebViewWithIdentifier:(NSInteger)identifier
        error:(FlutterError *_Nullable *_Nonnull)
error;
- (void)loadRequestForWebViewWithIdentifier:(NSInteger)identifier
                                    request:(BTNSUrlRequestData *)request
                                      error:(FlutterError *_Nullable *_Nonnull)error;
- (void)loadHTMLForWebViewWithIdentifier:(NSInteger)identifier
                              HTMLString:(NSString *)string
                                 baseURL:(nullable NSString *)baseUrl
        error:(FlutterError *_Nullable *_Nonnull)error;
- (void)loadFileForWebViewWithIdentifier:(NSInteger)identifier
                                 fileURL:(NSString *)url
                           readAccessURL:(NSString *)readAccessUrl
                                   error:(FlutterError *_Nullable *_Nonnull)error;
- (void)loadAssetForWebViewWithIdentifier:(NSInteger)identifier
                                 assetKey:(NSString *)key
                                    error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable NSNumber *)canGoBackForWebViewWithIdentifier:(NSInteger)identifier
        error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable NSNumber *)canGoForwardForWebViewWithIdentifier:(NSInteger)identifier
        error:
(FlutterError *_Nullable *_Nonnull)error;
- (void)goBackForWebViewWithIdentifier:(NSInteger)identifier
                                 error:(FlutterError *_Nullable *_Nonnull)error;
- (void)goForwardForWebViewWithIdentifier:(NSInteger)identifier
                                    error:(FlutterError *_Nullable *_Nonnull)error;
- (void)reloadWebViewWithIdentifier:(NSInteger)identifier
                              error:(FlutterError *_Nullable *_Nonnull)error;
- (nullable NSString *)titleForWebViewWithIdentifier:(NSInteger)identifier
        error:(FlutterError *_Nullable *_Nonnull)error;
- (void)setAllowsBackForwardForWebViewWithIdentifier:(NSInteger)identifier
                                           isAllowed:(BOOL)allow
                                               error:(FlutterError *_Nullable *_Nonnull)error;
- (void)setCustomUserAgentForWebViewWithIdentifier:(NSInteger)identifier
                                         userAgent:(nullable NSString *)userAgent
        error:(FlutterError *_Nullable *_Nonnull)error;
- (void)evaluateJavaScriptForWebViewWithIdentifier:(NSInteger)identifier
                                  javaScriptString:(NSString *)javaScriptString
                                        completion:(void (^)(id _Nullable,
                                                             FlutterError *_Nullable))completion;
- (void)setInspectableForWebViewWithIdentifier:(NSInteger)identifier
                                   inspectable:(BOOL)inspectable
                                         error:(FlutterError *_Nullable *_Nonnull)error;
- (nullable NSString *)customUserAgentForWebViewWithIdentifier:(NSInteger)identifier
        error:(FlutterError *_Nullable *_Nonnull)
error;
@end

extern void SetUpBTWKWebViewHostApi(id<FlutterBinaryMessenger> binaryMessenger,
                                     NSObject<BTWKWebViewHostApi> *_Nullable api);

/// The codec used by BTWKUIDelegateHostApi.
NSObject<FlutterMessageCodec> *BTWKUIDelegateHostApiGetCodec(void);

/// Mirror of WKUIDelegate.
///
/// See https://developer.apple.com/documentation/webkit/wkuidelegate?language=objc.
@protocol BTWKUIDelegateHostApi
- (void)createWithIdentifier:(NSInteger)identifier error:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void SetUpBTWKUIDelegateHostApi(id<FlutterBinaryMessenger> binaryMessenger,
                                        NSObject<BTWKUIDelegateHostApi> *_Nullable api);

/// The codec used by BTWKUIDelegateFlutterApi.
NSObject<FlutterMessageCodec> *BTWKUIDelegateFlutterApiGetCodec(void);

/// Handles callbacks from a WKUIDelegate instance.
///
/// See https://developer.apple.com/documentation/webkit/wkuidelegate?language=objc.
@interface BTWKUIDelegateFlutterApi : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
- (void)onCreateWebViewForDelegateWithIdentifier:(NSInteger)identifier
                               webViewIdentifier:(NSInteger)webViewIdentifier
                         configurationIdentifier:(NSInteger)configurationIdentifier
                                navigationAction:(BTWKNavigationActionData *)navigationAction
                                      completion:(void (^)(FlutterError *_Nullable))completion;
/// Callback to Dart function `WKUIDelegate.requestMediaCapturePermission`.
- (void)requestMediaCapturePermissionForDelegateWithIdentifier:(NSInteger)identifier
                                             webViewIdentifier:(NSInteger)webViewIdentifier
                                                        origin:(BTWKSecurityOriginData *)origin
                                                         frame:(BTWKFrameInfoData *)frame
                                                          type:(BTWKMediaCaptureTypeData *)type
                                                    completion:
                                                            (void (^)(
                                                            BTWKPermissionDecisionData *_Nullable,
                                                            FlutterError *_Nullable))completion;
/// Callback to Dart function `WKUIDelegate.runJavaScriptAlertPanel`.
- (void)runJavaScriptAlertPanelForDelegateWithIdentifier:(NSInteger)identifier
                                                 message:(NSString *)message
                                                   frame:(BTWKFrameInfoData *)frame
                                              completion:
                                                      (void (^)(FlutterError *_Nullable))completion;
/// Callback to Dart function `WKUIDelegate.runJavaScriptConfirmPanel`.
- (void)runJavaScriptConfirmPanelForDelegateWithIdentifier:(NSInteger)identifier
                                                   message:(NSString *)message
                                                     frame:(BTWKFrameInfoData *)frame
                                                completion:
                                                        (void (^)(NSNumber *_Nullable,
FlutterError *_Nullable))completion;
/// Callback to Dart function `WKUIDelegate.runJavaScriptTextInputPanel`.
- (void)runJavaScriptTextInputPanelForDelegateWithIdentifier:(NSInteger)identifier
                                                      prompt:(NSString *)prompt
                                                 defaultText:(NSString *)defaultText
                                                       frame:(BTWKFrameInfoData *)frame
                                                  completion:
                                                          (void (^)(NSString *_Nullable,
FlutterError *_Nullable))completion;
@end

/// The codec used by BTWKHttpCookieStoreHostApi.
NSObject<FlutterMessageCodec> *BTWKHttpCookieStoreHostApiGetCodec(void);

/// Mirror of WKHttpCookieStore.
///
/// See https://developer.apple.com/documentation/webkit/wkhttpcookiestore?language=objc.
@protocol BTWKHttpCookieStoreHostApi
- (void)createFromWebsiteDataStoreWithIdentifier:(NSInteger)identifier
                             dataStoreIdentifier:(NSInteger)websiteDataStoreIdentifier
                                           error:(FlutterError *_Nullable *_Nonnull)error;
- (void)setCookieForStoreWithIdentifier:(NSInteger)identifier
                                 cookie:(BTNSHttpCookieData *)cookie
                             completion:(void (^)(FlutterError *_Nullable))completion;
@end

extern void SetUpBTWKHttpCookieStoreHostApi(id<FlutterBinaryMessenger> binaryMessenger,
                                             NSObject<BTWKHttpCookieStoreHostApi> *_Nullable api);

/// The codec used by BTNSUrlHostApi.
NSObject<FlutterMessageCodec> *BTNSUrlHostApiGetCodec(void);

/// Host API for `NSUrl`.
///
/// This class may handle instantiating and adding native object instances that
/// are attached to a Dart instance or method calls on the associated native
/// class or an instance of the class.
///
/// See https://developer.apple.com/documentation/foundation/nsurl?language=objc.
@protocol BTNSUrlHostApi
- (nullable NSString *)absoluteStringForNSURLWithIdentifier:(NSInteger)identifier
        error:
(FlutterError *_Nullable *_Nonnull)error;
@end

extern void SetUpBTNSUrlHostApi(id<FlutterBinaryMessenger> binaryMessenger,
                                 NSObject<BTNSUrlHostApi> *_Nullable api);

/// The codec used by BTNSUrlFlutterApi.
NSObject<FlutterMessageCodec> *BTNSUrlFlutterApiGetCodec(void);

/// Flutter API for `NSUrl`.
///
/// This class may handle instantiating and adding Dart instances that are
/// attached to a native instance or receiving callback methods from an
/// overridden native class.
///
/// See https://developer.apple.com/documentation/foundation/nsurl?language=objc.
@interface BTNSUrlFlutterApi : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
- (void)createWithIdentifier:(NSInteger)identifier
                  completion:(void (^)(FlutterError *_Nullable))completion;
@end

/// The codec used by BTUIScrollViewDelegateHostApi.
NSObject<FlutterMessageCodec> *BTUIScrollViewDelegateHostApiGetCodec(void);

/// Host API for `UIScrollViewDelegate`.
///
/// This class may handle instantiating and adding native object instances that
/// are attached to a Dart instance or method calls on the associated native
/// class or an instance of the class.
///
/// See https://developer.apple.com/documentation/uikit/uiscrollviewdelegate?language=objc.
@protocol BTUIScrollViewDelegateHostApi
- (void)createWithIdentifier:(NSInteger)identifier error:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void SetUpBTUIScrollViewDelegateHostApi(
        id<FlutterBinaryMessenger> binaryMessenger,
        NSObject<BTUIScrollViewDelegateHostApi> *_Nullable api);

/// The codec used by BTUIScrollViewDelegateFlutterApi.
NSObject<FlutterMessageCodec> *BTUIScrollViewDelegateFlutterApiGetCodec(void);

/// Flutter API for `UIScrollViewDelegate`.
///
/// See https://developer.apple.com/documentation/uikit/uiscrollviewdelegate?language=objc.
@interface BTUIScrollViewDelegateFlutterApi : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
- (void)scrollViewDidScrollWithIdentifier:(NSInteger)identifier
                   UIScrollViewIdentifier:(NSInteger)uiScrollViewIdentifier
                                        x:(double)x
                                        y:(double)y
                               completion:(void (^)(FlutterError *_Nullable))completion;
@end

/// The codec used by BTNSUrlCredentialHostApi.
NSObject<FlutterMessageCodec> *BTNSUrlCredentialHostApiGetCodec(void);

/// Host API for `NSUrlCredential`.
///
/// This class may handle instantiating and adding native object instances that
/// are attached to a Dart instance or handle method calls on the associated
/// native class or an instance of the class.
///
/// See https://developer.apple.com/documentation/foundation/nsurlcredential?language=objc.
@protocol BTNSUrlCredentialHostApi
/// Create a new native instance and add it to the `InstanceManager`.
- (void)createWithUserWithIdentifier:(NSInteger)identifier
                                user:(NSString *)user
                            password:(NSString *)password
                         persistence:(BTNSUrlCredentialPersistence)persistence
                               error:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void SetUpBTNSUrlCredentialHostApi(id<FlutterBinaryMessenger> binaryMessenger,
                                           NSObject<BTNSUrlCredentialHostApi> *_Nullable api);

/// The codec used by BTNSUrlProtectionSpaceFlutterApi.
NSObject<FlutterMessageCodec> *BTNSUrlProtectionSpaceFlutterApiGetCodec(void);

/// Flutter API for `NSUrlProtectionSpace`.
///
/// This class may handle instantiating and adding Dart instances that are
/// attached to a native instance or receiving callback methods from an
/// overridden native class.
///
/// See https://developer.apple.com/documentation/foundation/nsurlprotectionspace?language=objc.
@interface BTNSUrlProtectionSpaceFlutterApi : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
/// Create a new Dart instance and add it to the `InstanceManager`.
- (void)createWithIdentifier:(NSInteger)identifier
                        host:(nullable NSString *)host
        realm:(nullable NSString *)realm
        authenticationMethod:(nullable NSString *)authenticationMethod
        completion:(void (^)(FlutterError *_Nullable))completion;
@end

/// The codec used by BTNSUrlAuthenticationChallengeFlutterApi.
NSObject<FlutterMessageCodec> *BTNSUrlAuthenticationChallengeFlutterApiGetCodec(void);

/// Flutter API for `NSUrlAuthenticationChallenge`.
///
/// This class may handle instantiating and adding Dart instances that are
/// attached to a native instance or receiving callback methods from an
/// overridden native class.
///
/// See
/// https://developer.apple.com/documentation/foundation/nsurlauthenticationchallenge?language=objc.
@interface BTNSUrlAuthenticationChallengeFlutterApi : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
/// Create a new Dart instance and add it to the `InstanceManager`.
- (void)createWithIdentifier:(NSInteger)identifier
   protectionSpaceIdentifier:(NSInteger)protectionSpaceIdentifier
                  completion:(void (^)(FlutterError *_Nullable))completion;
@end

NS_ASSUME_NONNULL_END
